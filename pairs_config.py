#!/usr/bin/env python3
"""
–ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø –¢–û–†–ì–û–í–´–• –ü–ê–† - –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ê–Ø –ó–ê–ì–†–£–ó–ö–ê –¢–û–ü-30
"""

import ccxt
import json
from typing import List, Dict
import time

def get_top_symbols_from_exchange(limit=30):
    """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–ª—É—á–∞–µ—Ç —Ç–æ–ø–æ–≤—ã–µ —Å–∏–º–≤–æ–ª—ã —Å OKX –ø–æ –æ–±—ä–µ–º—É"""
    try:
        exchange = ccxt.okx({
            "enableRateLimit": True,
            "options": {"defaultType": "swap"},
            "sandbox": False
        })
        
        print(f"üîç Loading top {limit} symbols from OKX...")
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ä—ã–Ω–∫–∏
        markets = exchange.load_markets()
        print(f"‚úÖ Loaded {len(markets)} total markets")
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º USDT —Å–≤–æ–ø –ø–∞—Ä—ã
        usdt_pairs = []
        for symbol, market in markets.items():
            if (market.get('quote') == 'USDT' and 
                market.get('type') == 'swap' and 
                market.get('active') and
                '/USDT:USDT' in symbol):
                
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–∞–∑–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
                base_currency = market.get('base')
                if base_currency:
                    usdt_pairs.append({
                        'symbol': symbol,
                        'volume': market.get('info', {}).get('volCcy24h', 0) or 1000000,  # fallback volume
                        'base': base_currency
                    })
        
        # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –ø–∞—Ä—ã, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback
        if not usdt_pairs:
            print("‚ö†Ô∏è No USDT pairs found, using fallback")
            return get_fallback_symbols()
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —Å–∏–º–≤–æ–ª—É (—Ç–∞–∫ –∫–∞–∫ –æ–±—ä–µ–º –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω)
        usdt_pairs.sort(key=lambda x: x['symbol'])
        
        # –ë–µ—Ä–µ–º —Ç–æ–ø –ª–∏–º–∏—Ç
        top_symbols = [pair['symbol'] for pair in usdt_pairs[:limit]]
        
        print(f"‚úÖ Successfully loaded {len(top_symbols)} symbols")
        print("üìã Sample symbols:", top_symbols[:5])
        return top_symbols
        
    except Exception as e:
        print(f"‚ùå Error loading symbols from exchange: {e}")
        # Fallback –Ω–∞ –æ—Å–Ω–æ–≤–Ω—ã–µ –ø–∞—Ä—ã
        return get_fallback_symbols()

def get_fallback_symbols():
    """–†–µ–∑–µ—Ä–≤–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å –±–∏—Ä–∂–∏"""
    return [
        "BTC/USDT:USDT", "ETH/USDT:USDT", "BNB/USDT:USDT", "SOL/USDT:USDT",
        "XRP/USDT:USDT", "ADA/USDT:USDT", "AVAX/USDT:USDT", "DOT/USDT:USDT",
        "LINK/USDT:USDT", "LTC/USDT:USDT", "ATOM/USDT:USDT", "TRX/USDT:USDT",
        "XLM/USDT:USDT", "BCH/USDT:USDT", "FIL/USDT:USDT", "ETC/USDT:USDT",
        "EOS/USDT:USDT", "AAVE/USDT:USDT", "ALGO/USDT:USDT", "XTZ/USDT:USDT",
        "XMR/USDT:USDT", "DASH/USDT:USDT", "ZEC/USDT:USDT", "COMP/USDT:USDT",
        "DOGE/USDT:USDT", "MATIC/USDT:USDT", "NEAR/USDT:USDT", "SAND/USDT:USDT",
        "MANA/USDT:USDT", "ENJ/USDT:USDT"
    ]

def generate_top_30_pairs(symbols: List[str]):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ç–æ–ø-30 —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä"""
    pairs = []
    
    if not symbols:
        symbols = get_fallback_symbols()
    
    # –£–±–µ–¥–∏–º—Å—è —á—Ç–æ BTC –∏ ETH –µ—Å—Ç—å –≤ —Å–ø–∏—Å–∫–µ
    essential_symbols = ["BTC/USDT:USDT", "ETH/USDT:USDT"]
    for essential in essential_symbols:
        if essential not in symbols:
            symbols.insert(0, essential)
    
    # 1. BTC –ø–∞—Ä—ã —Å —Ç–æ–ø-10 –∞–ª—å—Ç–∞–º–∏ (–∫—Ä–æ–º–µ —Å–µ–±—è)
    btc_symbol = "BTC/USDT:USDT"
    btc_counter = 0
    for symbol in symbols:
        if symbol != btc_symbol and btc_counter < 10:
            alt_name = symbol.split('/')[0]
            pairs.append({
                "asset_a": btc_symbol,
                "asset_b": symbol,
                "name": f"BTC_{alt_name}",
                "type": "btc_pair"
            })
            btc_counter += 1
    
    # 2. ETH –ø–∞—Ä—ã —Å —Ç–æ–ø-8 –∞–ª—å—Ç–∞–º–∏ (–∫—Ä–æ–º–µ BTC –∏ —Å–µ–±—è)
    eth_symbol = "ETH/USDT:USDT"
    eth_counter = 0
    for symbol in symbols:
        if (symbol != eth_symbol and 
            symbol != btc_symbol and 
            not symbol.startswith('BTC/') and 
            eth_counter < 8):
            alt_name = symbol.split('/')[0]
            pairs.append({
                "asset_a": eth_symbol,
                "asset_b": symbol,
                "name": f"ETH_{alt_name}",
                "type": "eth_pair"
            })
            eth_counter += 1
    
    # 3. –ü–∞—Ä—ã –º–µ–∂–¥—É —Ç–æ–ø-12 –∞–ª—å—Ç–∞–º–∏ (–∏—Å–∫–ª—é—á–∞—è BTC/ETH)
    alt_symbols = [s for s in symbols if not s.startswith('BTC/') and not s.startswith('ETH/')][:12]
    alt_pairs_added = 0
    
    for i in range(len(alt_symbols)):
        for j in range(i + 1, len(alt_symbols)):
            if alt_pairs_added >= 12:  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
                break
                
            asset_a = alt_symbols[i]
            asset_b = alt_symbols[j]
            name_a = asset_a.split('/')[0]
            name_b = asset_b.split('/')[0]
            
            pairs.append({
                "asset_a": asset_a,
                "asset_b": asset_b,
                "name": f"{name_a}_{name_b}",
                "type": "alt_pair"
            })
            alt_pairs_added += 1
        
        if alt_pairs_added >= 12:
            break
    
    # –û–±—Ä–µ–∑–∞–µ–º –¥–æ 30 –ø–∞—Ä –µ—Å–ª–∏ –ø–æ–ª—É—á–∏–ª–æ—Å—å –±–æ–ª—å—à–µ
    pairs = pairs[:30]
    
    print(f"‚úÖ Generated {len(pairs)} trading pairs:")
    print(f"   - {btc_counter} BTC pairs")
    print(f"   - {eth_counter} ETH pairs") 
    print(f"   - {alt_pairs_added} ALT pairs")
    
    return pairs

def get_current_top_30_pairs():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è - –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â–∏–µ —Ç–æ–ø-30 –ø–∞—Ä"""
    top_symbols = get_top_symbols_from_exchange(35)  # –ë–µ—Ä–µ–º –Ω–µ–º–Ω–æ–≥–æ –±–æ–ª—å—à–µ –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π
    return generate_top_30_pairs(top_symbols)

# üéØ –ü–†–ï–°–ï–¢–´ (–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ + —Ä—É—á–Ω—ã–µ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
def get_all_presets():
    """–í—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–µ—Å–µ—Ç—ã"""
    auto_pairs = get_current_top_30_pairs()
    
    return {
        # üöÄ –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ò–ï –ü–†–ï–°–ï–¢–´
        "auto_top_30": auto_pairs,
        "auto_top_20": auto_pairs[:20],
        "auto_top_15": auto_pairs[:15],
        "auto_btc_focused": [p for p in auto_pairs if p["asset_a"] == "BTC/USDT:USDT"][:15],
        
        # üìã –†–£–ß–ù–´–ï –ü–†–ï–°–ï–¢–´ (–¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
        "top_10_btc_pairs": [
            {"asset_a": "BTC/USDT:USDT", "asset_b": "ETH/USDT:USDT", "name": "BTC_ETH"},
            {"asset_a": "BTC/USDT:USDT", "asset_b": "BNB/USDT:USDT", "name": "BTC_BNB"},
            {"asset_a": "BTC/USDT:USDT", "asset_b": "SOL/USDT:USDT", "name": "BTC_SOL"},
            {"asset_a": "BTC/USDT:USDT", "asset_b": "XRP/USDT:USDT", "name": "BTC_XRP"},
            {"asset_a": "BTC/USDT:USDT", "asset_b": "ADA/USDT:USDT", "name": "BTC_ADA"},
            {"asset_a": "BTC/USDT:USDT", "asset_b": "AVAX/USDT:USDT", "name": "BTC_AVAX"},
            {"asset_a": "BTC/USDT:USDT", "asset_b": "DOT/USDT:USDT", "name": "BTC_DOT"},
            {"asset_a": "BTC/USDT:USDT", "asset_b": "LINK/USDT:USDT", "name": "BTC_LINK"},
            {"asset_a": "BTC/USDT:USDT", "asset_b": "LTC/USDT:USDT", "name": "BTC_LTC"},
            {"asset_a": "BTC/USDT:USDT", "asset_b": "ATOM/USDT:USDT", "name": "BTC_ATOM"},
        ]
    }

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
PAIR_PRESETS = get_all_presets()
AVAILABLE_SYMBOLS = get_top_symbols_from_exchange(30) or get_fallback_symbols()

def get_preset(preset_name):
    """–ü–æ–ª—É—á–∏—Ç—å –ø—Ä–µ—Å–µ—Ç –ø–æ –∏–º–µ–Ω–∏"""
    all_presets = get_all_presets()
    return all_presets.get(preset_name, [])

def list_available_presets():
    """–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–µ—Å–µ—Ç–æ–≤"""
    return list(get_all_presets().keys())

def refresh_presets():
    """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–µ—Å–µ—Ç–æ–≤ —Å –±–∏—Ä–∂–∏"""
    global PAIR_PRESETS, AVAILABLE_SYMBOLS
    PAIR_PRESETS = get_all_presets()
    AVAILABLE_SYMBOLS = get_top_symbols_from_exchange(30) or get_fallback_symbols()
    return PAIR_PRESETS

if __name__ == "__main__":
    def test_pair_combinations():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –≤—Å–µ –ø—Ä–µ—Å–µ—Ç—ã –ø–∞—Ä –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã"""
    print("üîç TESTING ALL PAIR PRESETS...")
    results = {}
    
    all_presets = get_all_presets()
    
    for preset_name, pairs in all_presets.items():
        valid_pairs = 0
        total_pairs = len(pairs)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é –ø–∞—Ä—É –Ω–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å
        for pair in pairs:
            if (pair.get('asset_a') and 
                pair.get('asset_b') and 
                pair.get('name')):
                valid_pairs += 1
        
        results[preset_name] = {
            'valid': valid_pairs,
            'total': total_pairs,
            'pairs': pairs
        }
        
        print(f"üìä {preset_name.upper()}:")
        print(f"   Valid pairs: {valid_pairs}/{total_pairs}")
        if valid_pairs > 0:
            print(f"   Sample: {pairs[0]['name']} - {pairs[0]['asset_a']} / {pairs[0]['asset_b']}")
    
    return results
    
    print("üîç TESTING AUTO TOP-30 PRESETS...")
    presets = get_all_presets()
    
    for name, pairs in presets.items():
        if name.startswith('auto_'):
            print(f"\nüéØ {name.upper()} ({len(pairs)} pairs):")
            for pair in pairs[:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5 –ø–∞—Ä
                print(f"   {pair['name']}: {pair['asset_a']} / {pair['asset_b']}")
            if len(pairs) > 5:
                print(f"   ... and {len(pairs) - 5} more pairs")