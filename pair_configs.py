#!/usr/bin/env python3
"""
–ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø –¢–û–†–ì–û–í–´–• –ü–ê–†
–õ–µ–≥–∫–æ –¥–æ–±–∞–≤–ª—è—Ç—å, —É–¥–∞–ª—è—Ç—å –∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–∞—Ä—ã
"""

# üéØ –ë–ê–ó–ê –î–ê–ù–ù–´–• –í–°–ï–• –î–û–°–¢–£–ü–ù–´–• –°–ò–ú–í–û–õ–û–í –ù–ê OKX
AVAILABLE_SYMBOLS = [
    "BTC/USDT:USDT", "ETH/USDT:USDT", "BNB/USDT:USDT", "SOL/USDT:USDT",
    "XRP/USDT:USDT", "ADA/USDT:USDT", "AVAX/USDT:USDT", "DOT/USDT:USDT", 
    "LINK/USDT:USDT", "LTC/USDT:USDT", "ATOM/USDT:USDT", "TRX/USDT:USDT",
    "XLM/USDT:USDT", "BCH/USDT:USDT", "FIL/USDT:USDT", "ETC/USDT:USDT",
    "EOS/USDT:USDT", "AAVE/USDT:USDT", "ALGO/USDT:USDT", "XTZ/USDT:USDT",
    "XMR/USDT:USDT", "DASH/USDT:USDT", "ZEC/USDT:USDT", "COMP/USDT:USDT"
]

# üéØ –ü–†–ï–°–ï–¢–´ –ü–ê–† (–ª–µ–≥–∫–æ –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç—å—Å—è –º–µ–∂–¥—É –Ω–∞–±–æ—Ä–∞–º–∏)
PAIR_PRESETS = {
    "top_10_btc_pairs": [
        # –¢–æ–ø-10 –ø–∞—Ä BTC —Å –æ—Å–Ω–æ–≤–Ω—ã–º–∏ –∞–ª—å—Ç–∞–º–∏
        {"asset_a": "BTC/USDT:USDT", "asset_b": "ETH/USDT:USDT", "name": "BTC_ETH"},
        {"asset_a": "BTC/USDT:USDT", "asset_b": "BNB/USDT:USDT", "name": "BTC_BNB"},
        {"asset_a": "BTC/USDT:USDT", "asset_b": "SOL/USDT:USDT", "name": "BTC_SOL"},
        {"asset_a": "BTC/USDT:USDT", "asset_b": "XRP/USDT:USDT", "name": "BTC_XRP"},
        {"asset_a": "BTC/USDT:USDT", "asset_b": "ADA/USDT:USDT", "name": "BTC_ADA"},
        {"asset_a": "BTC/USDT:USDT", "asset_b": "AVAX/USDT:USDT", "name": "BTC_AVAX"},
        {"asset_a": "BTC/USDT:USDT", "asset_b": "DOT/USDT:USDT", "name": "BTC_DOT"},
        {"asset_a": "BTC/USDT:USDT", "asset_b": "LINK/USDT:USDT", "name": "BTC_LINK"},
        {"asset_a": "BTC/USDT:USDT", "asset_b": "LTC/USDT:USDT", "name": "BTC_LTC"},
        {"asset_a": "BTC/USDT:USDT", "asset_b": "ATOM/USDT:USDT", "name": "BTC_ATOM"},
    ],
    
    "eth_cross_pairs": [
        # –ü–∞—Ä—ã ETH —Å –¥—Ä—É–≥–∏–º–∏ –∞–ª—å—Ç–∞–º–∏
        {"asset_a": "ETH/USDT:USDT", "asset_b": "BNB/USDT:USDT", "name": "ETH_BNB"},
        {"asset_a": "ETH/USDT:USDT", "asset_b": "SOL/USDT:USDT", "name": "ETH_SOL"},
        {"asset_a": "ETH/USDT:USDT", "asset_b": "XRP/USDT:USDT", "name": "ETH_XRP"},
        {"asset_a": "ETH/USDT:USDT", "asset_b": "ADA/USDT:USDT", "name": "ETH_ADA"},
        {"asset_a": "ETH/USDT:USDT", "asset_b": "AVAX/USDT:USDT", "name": "ETH_AVAX"},
        {"asset_a": "ETH/USDT:USDT", "asset_b": "DOT/USDT:USDT", "name": "ETH_DOT"},
    ],
    
    "altcoin_pairs": [
        # –ü–∞—Ä—ã –º–µ–∂–¥—É –∞–ª—å—Ç–∞–º–∏
        {"asset_a": "BNB/USDT:USDT", "asset_b": "SOL/USDT:USDT", "name": "BNB_SOL"},
        {"asset_a": "SOL/USDT:USDT", "asset_b": "AVAX/USDT:USDT", "name": "SOL_AVAX"},
        {"asset_a": "XRP/USDT:USDT", "asset_b": "ADA/USDT:USDT", "name": "XRP_ADA"},
        {"asset_a": "DOT/USDT:USDT", "asset_b": "LINK/USDT:USDT", "name": "DOT_LINK"},
        {"asset_a": "LTC/USDT:USDT", "asset_b": "ATOM/USDT:USDT", "name": "LTC_ATOM"},
    ],
    
    "full_20_pairs": [
        # –ü–æ–ª–Ω—ã–π –Ω–∞–±–æ—Ä –∏–∑ 20 –ø–∞—Ä (—Ç–µ–∫—É—â–∏–π)
        {"asset_a": "BTC/USDT:USDT", "asset_b": "ETH/USDT:USDT", "name": "BTC_ETH"},
        {"asset_a": "BTC/USDT:USDT", "asset_b": "BNB/USDT:USDT", "name": "BTC_BNB"},
        {"asset_a": "BTC/USDT:USDT", "asset_b": "SOL/USDT:USDT", "name": "BTC_SOL"},
        {"asset_a": "BTC/USDT:USDT", "asset_b": "XRP/USDT:USDT", "name": "BTC_XRP"},
        {"asset_a": "BTC/USDT:USDT", "asset_b": "ADA/USDT:USDT", "name": "BTC_ADA"},
        {"asset_a": "BTC/USDT:USDT", "asset_b": "AVAX/USDT:USDT", "name": "BTC_AVAX"},
        {"asset_a": "BTC/USDT:USDT", "asset_b": "DOT/USDT:USDT", "name": "BTC_DOT"},
        {"asset_a": "BTC/USDT:USDT", "asset_b": "LINK/USDT:USDT", "name": "BTC_LINK"},
        {"asset_a": "BTC/USDT:USDT", "asset_b": "LTC/USDT:USDT", "name": "BTC_LTC"},
        {"asset_a": "BTC/USDT:USDT", "asset_b": "ATOM/USDT:USDT", "name": "BTC_ATOM"},
        {"asset_a": "ETH/USDT:USDT", "asset_b": "BNB/USDT:USDT", "name": "ETH_BNB"},
        {"asset_a": "ETH/USDT:USDT", "asset_b": "SOL/USDT:USDT", "name": "ETH_SOL"},
        {"asset_a": "ETH/USDT:USDT", "asset_b": "XRP/USDT:USDT", "name": "ETH_XRP"},
        {"asset_a": "ETH/USDT:USDT", "asset_b": "ADA/USDT:USDT", "name": "ETH_ADA"},
        {"asset_a": "ETH/USDT:USDT", "asset_b": "AVAX/USDT:USDT", "name": "ETH_AVAX"},
        {"asset_a": "ETH/USDT:USDT", "asset_b": "DOT/USDT:USDT", "name": "ETH_DOT"},
        {"asset_a": "BNB/USDT:USDT", "asset_b": "SOL/USDT:USDT", "name": "BNB_SOL"},
        {"asset_a": "SOL/USDT:USDT", "asset_b": "AVAX/USDT:USDT", "name": "SOL_AVAX"},
        {"asset_a": "XRP/USDT:USDT", "asset_b": "ADA/USDT:USDT", "name": "XRP_ADA"},
        {"asset_a": "DOT/USDT:USDT", "asset_b": "LINK/USDT:USDT", "name": "DOT_LINK"},
    ]
}

def generate_pair_name(asset_a, asset_b):
    """–ê–≤—Ç–æ–≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–º–µ–Ω–∏ –ø–∞—Ä—ã"""
    name_a = asset_a.split('/')[0]
    name_b = asset_b.split('/')[0]
    return f"{name_a}_{name_b}"

def create_custom_pairs(asset_list, base_asset=None):
    """
    –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –ø–∞—Ä –∏–∑ —Å–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–æ–≤
    """
    pairs = []
    
    if base_asset:
        # –°–æ–∑–¥–∞–µ–º –ø–∞—Ä—ã —Å –±–∞–∑–æ–≤—ã–º –∞–∫—Ç–∏–≤–æ–º
        for asset in asset_list:
            if asset != base_asset:
                pairs.append({
                    "asset_a": base_asset,
                    "asset_b": asset,
                    "name": generate_pair_name(base_asset, asset)
                })
    else:
        # –°–æ–∑–¥–∞–µ–º –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏
        for i in range(len(asset_list)):
            for j in range(i + 1, len(asset_list)):
                pairs.append({
                    "asset_a": asset_list[i],
                    "asset_b": asset_list[j], 
                    "name": generate_pair_name(asset_list[i], asset_list[j])
                })
    
    return pairs

def validate_pair(pair):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ –ø–∞—Ä—ã"""
    if pair["asset_a"] not in AVAILABLE_SYMBOLS:
        return False, f"Asset A not available: {pair['asset_a']}"
    if pair["asset_b"] not in AVAILABLE_SYMBOLS:
        return False, f"Asset B not available: {pair['asset_b']}"
    if pair["asset_a"] == pair["asset_b"]:
        return False, "Assets cannot be the same"
    
    return True, "Valid"

def get_preset(preset_name):
    """–ü–æ–ª—É—á–∏—Ç—å –ø—Ä–µ—Å–µ—Ç –ø–∞—Ä –ø–æ –∏–º–µ–Ω–∏"""
    return PAIR_PRESETS.get(preset_name, [])

def list_available_presets():
    """–°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–µ—Å–µ—Ç–æ–≤"""
    return list(PAIR_PRESETS.keys())

def test_pair_combinations():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –∫–æ–º–±–∏–Ω–∞—Ü–∏–π –ø–∞—Ä"""
    test_results = {}
    
    for preset_name, pairs in PAIR_PRESETS.items():
        valid_pairs = []
        invalid_pairs = []
        
        for pair in pairs:
            is_valid, message = validate_pair(pair)
            if is_valid:
                valid_pairs.append(pair)
            else:
                invalid_pairs.append((pair, message))
        
        test_results[preset_name] = {
            'total': len(pairs),
            'valid': len(valid_pairs),
            'invalid': invalid_pairs
        }
    
    return test_results

if __name__ == "__main__":
    # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –Ω–∞–ø—Ä—è–º—É—é
    print("üîç TESTING PAIR CONFIGURATIONS...")
    results = test_pair_combinations()
    
    for preset, data in results.items():
        print(f"\nüìä {preset.upper()}:")
        print(f"   Total pairs: {data['total']}")
        print(f"   Valid pairs: {data['valid']}")
        print(f"   Invalid pairs: {len(data['invalid'])}")
        
        for invalid_pair, reason in data['invalid']:
            print(f"     ‚ùå {invalid_pair['name']}: {reason}")