import ccxt
import pandas as pd
import time
from datetime import datetime

class SpreadAnalyzer:
    def __init__(self):
        self.exchanges = {
            'binance': ccxt.binance(),
            'okx': ccxt.okx(),
            'bybit': ccxt.bybit(),
            'kucoin': ccxt.kucoin(),
            'gateio': ccxt.gateio(),
            'mexc': ccxt.mexc()
        }
        
        self.symbols = [
            'BTC/USDT', 'ETH/USDT', 'SOL/USDT',
            'XRP/USDT', 'ADA/USDT', 'DOT/USDT'
        ]

    def fetch_prices(self):
        """–ü–æ–ª—É—á–∞–µ–º —Ü–µ–Ω—ã —Å–æ –≤—Å–µ—Ö –±–∏—Ä–∂"""
        prices = {}
        
        for exchange_name, exchange in self.exchanges.items():
            try:
                prices[exchange_name] = {}
                print(f"üîç –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å {exchange_name}...")
                
                for symbol in self.symbols:
                    try:
                        ticker = exchange.fetch_ticker(symbol)
                        prices[exchange_name][symbol] = {
                            'bid': ticker['bid'],
                            'ask': ticker['ask'],
                            'last': ticker['last'],
                            'spread_pct': (ticker['ask'] - ticker['bid']) / ticker['bid'] * 100
                        }
                    except Exception as e:
                        print(f"   –û—à–∏–±–∫–∞ –¥–ª—è {symbol} –Ω–∞ {exchange_name}: {e}")
                
                time.sleep(0.2)  # Rate limit
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ {exchange_name}: {e}")
                
        return prices

    def calculate_arbitrage_opportunities(self, prices):
        """–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏"""
        opportunities = []
        
        for symbol in self.symbols:
            best_bid = {'exchange': None, 'price': 0}
            best_ask = {'exchange': None, 'price': float('inf')}
            
            for exchange_name in prices:
                if symbol in prices[exchange_name]:
                    price_data = prices[exchange_name][symbol]
                    
                    if price_data['ask'] < best_ask['price']:
                        best_ask = {'exchange': exchange_name, 'price': price_data['ask']}
                    
                    if price_data['bid'] > best_bid['price']:
                        best_bid = {'exchange': exchange_name, 'price': price_data['bid']}
            
            if (best_bid['exchange'] and best_ask['exchange'] and 
                best_bid['exchange'] != best_ask['exchange']):
                
                spread_pct = (best_bid['price'] - best_ask['price']) / best_ask['price'] * 100
                
                if spread_pct > 0.05:  # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Å–ø—Ä–µ–¥ 0.05%
                    opportunities.append({
                        'symbol': symbol,
                        'buy_at': best_ask['exchange'],
                        'sell_at': best_bid['exchange'],
                        'buy_price': best_ask['price'],
                        'sell_price': best_bid['price'],
                        'spread_pct': spread_pct,
                        'profit_per_unit': best_bid['price'] - best_ask['price'],
                        'timestamp': datetime.now()
                    })
        
        return sorted(opportunities, key=lambda x: x['spread_pct'], reverse=True)

    def analyze_commissions_impact(self, opportunity, capital=1000):
        """–ê–Ω–∞–ª–∏–∑ –≤–ª–∏—è–Ω–∏—è –∫–æ–º–∏—Å—Å–∏–π –Ω–∞ –ø—Ä–∏–±—ã–ª—å"""
        commissions = {
            'binance': 0.1,
            'okx': 0.08,
            'bybit': 0.06,
            'kucoin': 0.1,
            'gateio': 0.2,
            'mexc': 0.2
        }
        
        buy_commission = commissions.get(opportunity['buy_at'], 0.1)
        sell_commission = commissions.get(opportunity['sell_at'], 0.1)
        
        units = capital / opportunity['buy_price']
        gross_profit = units * opportunity['profit_per_unit']
        total_commissions = capital * (buy_commission + sell_commission) / 100
        
        net_profit = gross_profit - total_commissions
        net_profit_pct = (net_profit / capital) * 100
        
        return {
            'gross_profit': gross_profit,
            'total_commissions': total_commissions,
            'net_profit': net_profit,
            'net_profit_pct': net_profit_pct,
            'profitable': net_profit > 0
        }

    def monitor_continuous(self, interval=30):
        """–ù–µ–ø—Ä–µ—Ä—ã–≤–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥"""
        print("üöÄ –ó–ê–ü–£–°–ö –ê–ù–ê–õ–ò–ó–ê –°–ü–†–ï–î–û–í –ú–ï–ñ–î–£ –ë–ò–†–ñ–ê–ú–ò...")
        print("=" * 80)
        
        while True:
            try:
                print(f"\nüìä {datetime.now().strftime('%H:%M:%S')} - –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö...")
                prices = self.fetch_prices()
                opportunities = self.calculate_arbitrage_opportunities(prices)
                
                if opportunities:
                    print(f"\nüéØ –ù–ê–ô–î–ï–ù–û –ê–†–ë–ò–¢–†–ê–ñ–ù–´–• –í–û–ó–ú–û–ñ–ù–û–°–¢–ï–ô: {len(opportunities)}")
                    print("=" * 80)
                    
                    for i, opp in enumerate(opportunities[:5], 1):
                        profit_analysis = self.analyze_commissions_impact(opp)
                        
                        print(f"\n#{i} {opp['symbol']}")
                        print(f"   üìà –ö–£–ü–ò–¢–¨:  {opp['buy_at']:8} @ ${opp['buy_price']:.4f}")
                        print(f"   üìâ –ü–†–û–î–ê–¢–¨: {opp['sell_at']:8} @ ${opp['sell_price']:.4f}")
                        print(f"   üìä –°–ø—Ä–µ–¥: {opp['spread_pct']:.4f}%")
                        print(f"   üí∞ –ü—Ä–∏–±—ã–ª—å –∑–∞ –µ–¥–∏–Ω–∏—Ü—É: ${opp['profit_per_unit']:.4f}")
                        
                        if profit_analysis['profitable']:
                            print(f"   ‚úÖ –ß–ò–°–¢–ê–Ø –ü–†–ò–ë–´–õ–¨: ${profit_analysis['net_profit']:.2f} ({profit_analysis['net_profit_pct']:.4f}%)")
                        else:
                            print(f"   ‚ùå –£–ë–´–¢–û–ö: ${abs(profit_analysis['net_profit']):.2f} (–∫–æ–º–∏—Å—Å–∏–∏ —Å—ä–µ–¥–∞—é—Ç –ø—Ä–∏–±—ã–ª—å)")
                else:
                    print("\n‚ùå –ê—Ä–±–∏—Ç—Ä–∞–∂–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã (—Å–ø—Ä–µ–¥—ã —Å–ª–∏—à–∫–æ–º –º–∞–ª–µ–Ω—å–∫–∏–µ)")
                
                # –°–≤–æ–¥–∫–∞ –ø–æ —Å–ø—Ä–µ–¥–∞–º
                print(f"\nüìã –°–í–û–î–ö–ê –ü–û –°–ü–†–ï–î–ê–ú:")
                for symbol in self.symbols[:3]:  # –¢–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 3 –¥–ª—è –∫—Ä–∞—Ç–∫–æ—Å—Ç–∏
                    print(f"\n{symbol}:")
                    for exchange in ['binance', 'okx', 'bybit']:
                        if exchange in prices and symbol in prices[exchange]:
                            spread = prices[exchange][symbol]['spread_pct']
                            print(f"   {exchange:8}: {spread:.4f}%")
                
                print(f"\n‚è≥ –°–ª–µ–¥—É—é—â–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ {interval} —Å–µ–∫—É–Ω–¥...")
                print("=" * 80)
                time.sleep(interval)
                
            except KeyboardInterrupt:
                print("\nüõë –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
                break
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
                time.sleep(30)

# –ó–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞
if __name__ == "__main__":
    analyzer = SpreadAnalyzer()
    analyzer.monitor_continuous(interval=30)
