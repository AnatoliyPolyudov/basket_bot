from observer import Observer
import logging
from datetime import datetime
import json

logging.basicConfig(level=logging.WARNING)
logger = logging.getLogger(__name__)

class OKXBasketTrader(Observer):
    def __init__(self, paper_trading=True, max_exposure=1000):
        self.paper_trading = paper_trading
        self.max_exposure = max_exposure
        self.current_positions = {}  # üÜï –§–æ—Ä–º–∞—Ç: {pair_name: {signal: str, size: float, entry_time: datetime, entry_z: float}}
        self.position_history = []   # üÜï –ò—Å—Ç–æ—Ä–∏—è –≤—Å–µ—Ö —Å–¥–µ–ª–æ–∫
        self.trading_enabled = True  # üÜï –§–ª–∞–≥ –≤–∫–ª—é—á–µ–Ω–∏—è/–≤—ã–∫–ª—é—á–µ–Ω–∏—è —Ç–æ—Ä–≥–æ–≤–ª–∏

    def update(self, data):
        """
        –ú–µ—Ç–æ–¥ Observer: –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ –∫–∞–∂–¥–æ–º –Ω–æ–≤–æ–º —Å–∏–≥–Ω–∞–ª–µ –æ—Ç –º–æ–Ω–∏—Ç–æ—Ä–∞.
        """
        if not self.trading_enabled:
            return
            
        # üÜï –û–ë–†–ê–ë–ê–¢–´–í–ê–ï–ú –î–ê–ù–ù–´–ï –û–¢ R-–ü–û–î–•–û–î–ê
        pairs_data = data.get('pairs_data', [])
        
        for pair_data in pairs_data:
            signal = pair_data.get("signal")
            pair_name = pair_data.get("pair_name")
            z_score = pair_data.get("z", 0)
            
            # üÜï –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–û–ï –ó–ê–ö–†–´–¢–ò–ï –ü–û EXIT SIGNAL
            if signal == "EXIT_POSITION" and pair_name in self.current_positions:
                self.close_position(signal, pair_name, f"Auto-close on exit signal (Z={z_score:.2f})")
            
            # üÜï –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–û–ï –û–¢–ö–†–´–¢–ò–ï –ü–û –°–ò–ì–ù–ê–õ–ê–ú (–µ—Å–ª–∏ –Ω–µ—Ç –æ—Ç–∫—Ä—ã—Ç–æ–π –ø–æ–∑–∏—Ü–∏–∏)
            elif (signal and 
                  signal not in ["HOLD", "NO DATA", "NO TRADE - NOT STATIONARY", "EXIT_POSITION"] and
                  pair_name not in self.current_positions):
                
                # üÜï –ü–†–û–í–ï–†–Ø–ï–ú ADF –¢–ï–°–¢ –ü–ï–†–ï–î –û–¢–ö–†–´–¢–ò–ï–ú
                adf_passed = pair_data.get("adf_passed", False)
                if adf_passed:
                    self.open_position(signal, pair_name, z_score=z_score)

    def execute_signal(self, signal, data, pair_name):
        """
        –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–∞ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –ø–∞—Ä—ã.
        """
        if self.paper_trading:
            logger.debug(f"[PAPER TRADING] Pair {pair_name}: Signal received: {signal}")
        else:
            logger.info(f"[REAL TRADING] Pair {pair_name}: Would execute: {signal}")

    # --- üÜï –£–õ–£–ß–®–ï–ù–ù–´–ï –ú–ï–¢–û–î–´ –î–õ–Ø –ö–ù–û–ü–û–ö ---
    def open_position(self, signal: str, pair_name: str, size=None, z_score=0):
        """–û—Ç–∫—Ä—ã—Ç–∏–µ –ø–æ–∑–∏—Ü–∏–∏ —Å –ø–æ–ª–Ω—ã–º —Ç—Ä–µ–∫–∏–Ω–≥–æ–º"""
        if size is None:
            size = self.max_exposure / 4  # üÜï –†–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞–ø–∏—Ç–∞–ª –ø–æ –ø–∞—Ä–∞–º
        
        # üÜï –ü–†–û–í–ï–†–Ø–ï–ú –ù–ï–¢ –õ–ò –£–ñ–ï –û–¢–ö–†–´–¢–û–ô –ü–û–ó–ò–¶–ò–ò
        if pair_name in self.current_positions:
            logger.warning(f"‚ö†Ô∏è [PAPER] Position already open for {pair_name}: {self.current_positions[pair_name]['signal']}")
            return False
        
        # üÜï –°–û–ó–î–ê–ï–ú –ü–û–ó–ò–¶–ò–Æ –° –î–ï–¢–ê–õ–¨–ù–û–ô –ò–ù–§–û–†–ú–ê–¶–ò–ï–ô
        position = {
            'signal': signal,
            'size': size,
            'pair_name': pair_name,
            'entry_time': datetime.now(),
            'entry_z': z_score,
            'status': 'OPEN',
            'type': 'MANUAL' if 'MANUAL' in signal else 'AUTO'
        }
        
        self.current_positions[pair_name] = position
        
        # üÜï –î–û–ë–ê–í–õ–Ø–ï–ú –í –ò–°–¢–û–†–ò–Æ
        trade_record = position.copy()
        trade_record['action'] = 'OPEN'
        trade_record['timestamp'] = datetime.now().isoformat()
        self.position_history.append(trade_record)
        
        logger.info(f"‚úÖ [PAPER] OPENED: {pair_name} - {signal} | Size: {size} | Z: {z_score:.2f}")
        return True

    def close_position(self, signal: str, pair_name: str, reason="Manual close"):
        """–ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ–∑–∏—Ü–∏–∏ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é"""
        if pair_name not in self.current_positions:
            logger.warning(f"‚ö†Ô∏è [PAPER] No open position to close for {pair_name}")
            return False
        
        position = self.current_positions[pair_name]
        
        # üÜï –°–û–ó–î–ê–ï–ú –ó–ê–ü–ò–°–¨ –û –ó–ê–ö–†–´–¢–ò–ò
        close_record = {
            'action': 'CLOSE',
            'pair_name': pair_name,
            'original_signal': position['signal'],
            'close_signal': signal,
            'size': position['size'],
            'entry_time': position['entry_time'],
            'exit_time': datetime.now(),
            'entry_z': position['entry_z'],
            'exit_reason': reason,
            'duration_minutes': round((datetime.now() - position['entry_time']).total_seconds() / 60, 1),
            'timestamp': datetime.now().isoformat()
        }
        
        self.position_history.append(close_record)
        
        # üÜï –£–î–ê–õ–Ø–ï–ú –ò–ó –¢–ï–ö–£–©–ò–• –ü–û–ó–ò–¶–ò–ô
        del self.current_positions[pair_name]
        
        logger.info(f"‚úÖ [PAPER] CLOSED: {pair_name} | Reason: {reason} | Duration: {close_record['duration_minutes']}min")
        return True

    # --- üÜï –ú–ï–¢–û–î–´ –î–õ–Ø –ü–û–õ–£–ß–ï–ù–ò–Ø –°–¢–ê–¢–£–°–ê ---
    def get_open_positions(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π"""
        return self.current_positions

    def get_position_history(self, limit=10):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é —Å–¥–µ–ª–æ–∫"""
        return self.position_history[-limit:] if self.position_history else []

    def get_trading_summary(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–≤–æ–¥–∫—É –ø–æ —Ç–æ—Ä–≥–æ–≤–ª–µ"""
        total_trades = len([h for h in self.position_history if h['action'] == 'CLOSE'])
        open_positions = len(self.current_positions)
        
        return {
            'total_trades': total_trades,
            'open_positions': open_positions,
            'current_positions': list(self.current_positions.keys()),
            'last_trades': self.get_position_history(5)
        }

    def export_trading_log(self, filename=None):
        """–≠–∫—Å–ø–æ—Ä—Ç –ª–æ–≥–∞ —Ç–æ—Ä–≥–æ–≤–ª–∏ –≤ —Ñ–∞–π–ª"""
        if not filename:
            filename = f"trading_log_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json"
        
        log_data = {
            'export_time': datetime.now().isoformat(),
            'summary': self.get_trading_summary(),
            'position_history': self.position_history,
            'current_positions': self.current_positions
        }
        
        try:
            with open(filename, 'w', encoding='utf-8') as f:
                json.dump(log_data, f, indent=2, default=str)
            logger.info(f"‚úÖ Trading log exported to {filename}")
            return True
        except Exception as e:
            logger.error(f"‚ùå Error exporting log: {e}")
            return False

    # --- üÜï –ú–ï–¢–û–î–´ –£–ü–†–ê–í–õ–ï–ù–ò–Ø –¢–û–†–ì–û–í–õ–ï–ô ---
    def enable_trading(self):
        """–í–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é —Ç–æ—Ä–≥–æ–≤–ª—é"""
        self.trading_enabled = True
        logger.info("‚úÖ AUTO TRADING ENABLED")

    def disable_trading(self):
        """–í—ã–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é —Ç–æ—Ä–≥–æ–≤–ª—é"""
        self.trading_enabled = False
        logger.info("üö´ AUTO TRADING DISABLED")

    def close_all_positions(self, reason="Manual close all"):
        """–ó–∞–∫—Ä—ã—Ç—å –≤—Å–µ –æ—Ç–∫—Ä—ã—Ç—ã–µ –ø–æ–∑–∏—Ü–∏–∏"""
        closed_count = 0
        for pair_name in list(self.current_positions.keys()):
            if self.close_position("CLOSE_ALL", pair_name, reason):
                closed_count += 1
        
        logger.info(f"‚úÖ Closed {closed_count} positions")
        return closed_count