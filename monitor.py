===== monitor.py =====

# ... –æ—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π ...

    def run(self, interval_minutes=1):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –¥–ª—è –≤—Å–µ—Ö –ø–∞—Ä"""
        logger.info("üöÄ Starting R-STYLE PAIR MONITOR...")
        logger.info(f"üéØ Monitoring {len(self.trading_pairs)} trading pairs")
        logger.info(f"üéØ {len(self.all_symbols)} unique symbols")
        logger.info(f"üéØ ADF Lookbacks: {self.adf_lookbacks} bars")
        logger.info(f"üéØ Z-score Window: {self.window_bars} bars")
        logger.info(f"üéØ R-STYLE THRESHOLDS: ENTER ¬±1.0, EXIT ¬±0.5")
        
        logger.info("üî• PERFORMING COMPLETE DATA RESET BEFORE START...")
        if not self.complete_data_reset():
            logger.error("‚ùå CRITICAL: Complete data reset failed")
            return
            
        consecutive_bad_data = 0
        
        while True:
            try:
                prices = self.get_current_prices()
                if not prices:
                    consecutive_bad_data += 1
                    if consecutive_bad_data >= 3:
                        logger.error("üö® Too many consecutive price errors, restarting...")
                        self.complete_data_reset()
                        consecutive_bad_data = 0
                    time.sleep(60)
                    continue
                
                consecutive_bad_data = 0
                current_time = datetime.utcnow().strftime('%H:%M:%S')
                
                # üéØ –û–ë–†–ê–ë–ê–¢–´–í–ê–ï–ú –ö–ê–ñ–î–£–Æ –ü–ê–†–£ –ù–ï–ó–ê–í–ò–°–ò–ú–û
                all_pair_data = []
                active_pairs_count = 0
                trading_signals_count = 0
                
                for pair in self.trading_pairs:
                    # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–∞—Ä—ã –±–µ–∑ –¥–∞–Ω–Ω—ã—Ö
                    if not self.pair_states[pair["name"]]['data_loaded']:
                        continue
                        
                    # –†–∞—Å—á–µ—Ç Z-score –∏ ADF –¥–ª—è –ø–∞—Ä—ã
                    z, spread, stats = self.calculate_zscore_for_pair(pair, prices)
                    historical_spread = self.get_pair_historical_spread(pair)
                    is_stationary = self.calculate_adf_test(historical_spread) if historical_spread is not None else False
                    
                    signal = self.trading_signal_for_pair(z, is_stationary, pair["name"])
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–∞—Ä—ã
                    self.pair_states[pair["name"]]['adf_passed'] = is_stationary
                    self.pair_states[pair["name"]]['current_signal'] = signal
                    
                    if is_stationary:
                        active_pairs_count += 1
                    if signal not in ["HOLD", "NO DATA", "NO TRADE - NOT STATIONARY"]:
                        trading_signals_count += 1
                    
                    # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ–ª—å–∫–æ –¥–ª—è –ø–∞—Ä —Å –¥–∞–Ω–Ω—ã–º–∏ –∏ —Å–∏–≥–Ω–∞–ª–∞–º–∏
                    if z is not None and is_stationary:
                        adf_status = "STATIONARY"
                        status = "üö® ABNORMAL" if abs(z) > 3.0 else "‚úÖ NORMAL"
                        
                        if signal != "HOLD":
                            # üÜï –ë–ï–ó–û–ü–ê–°–ù–û–ï –§–û–†–ú–ê–¢–ò–†–û–í–ê–ù–ò–ï - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –ß–ê–°–¢–¨
                            try:
                                # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º z –≤ float –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                                z_float = float(z)
                                logger.info(f"[{current_time}] {pair['name']}: Z={z_float:.2f} {status} | {signal}")
                            except (ValueError, TypeError, Exception) as format_error:
                                # –ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–∞–µ—Ç –æ—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è, –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–µ–∑–æ–ø–∞—Å–Ω—ã–π –≤—ã–≤–æ–¥
                                logger.info(f"[{current_time}] {pair['name']}: Z={z} {status} | {signal}")
                    
                    # –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
                    pair_data = {
                        "pair_name": pair["name"],
                        "asset_a": pair["asset_a"],
                        "asset_b": pair["asset_b"], 
                        "price_a": prices.get(pair["asset_a"], 0),
                        "price_b": prices.get(pair["asset_b"], 0),
                        "spread": spread if spread else 0,
                        "z": z if z else 0,
                        "signal": signal,
                        "adf_passed": is_stationary
                    }
                    all_pair_data.append(pair_data)
                
                # –°–≤–æ–¥–∫–∞ –ø–æ –∏—Ç–µ—Ä–∞—Ü–∏–∏
                logger.info(f"üìä [{current_time}] Active: {active_pairs_count}/{len(self.trading_pairs)} | Signals: {trading_signals_count}")
                
                # –£–≤–µ–¥–æ–º–ª—è–µ–º –Ω–∞–±–ª—é–¥–∞—Ç–µ–ª–µ–π
                report_data = {
                    "time": datetime.utcnow(),
                    "pairs_data": all_pair_data,
                    "total_pairs": len(self.trading_pairs),
                    "active_pairs": active_pairs_count,
                    "trading_signals": trading_signals_count
                }
                
                # üÜï –°–û–•–†–ê–ù–Ø–ï–ú –¢–ï–ö–£–©–ò–ï –î–ê–ù–ù–´–ï –î–õ–Ø TELEGRAM
                self.current_report_data = report_data
                
                self.notify(report_data)
                
                time.sleep(interval_minutes * 60)
                
            except KeyboardInterrupt:
                logger.info("üõë Monitoring stopped by user")
                break
            except Exception as e:
                logger.warning(f"‚ùå Error in main loop: {e}")
                time.sleep(60)

# ... –æ—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π ...