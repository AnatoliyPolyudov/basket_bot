import ccxt
import pandas as pd
import numpy as np
import time
import logging
from datetime import datetime, timedelta
from observer import Subject
from console_observer import ConsoleObserver
from trader import OKXBasketTrader
from telegram_observer import TelegramObserver
from callback_handler import handle_callback
import threading
import requests
import sys
from statsmodels.tsa.stattools import adfuller
import warnings
warnings.filterwarnings('ignore')

# üéØ –ò–ú–ü–û–†–¢–ò–†–£–ï–ú –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Æ –ü–ê–†
from pairs_config import get_preset, PAIR_PRESETS

logging.basicConfig(level=logging.INFO, format="%(message)s")
logger = logging.getLogger(__name__)

class RStylePairMonitor(Subject):
    def __init__(self, pair_preset="full_20_pairs"):
        super().__init__()
        self.exchange = ccxt.okx({
            "enableRateLimit": True,
            "options": {"defaultType": "swap"},
            "sandbox": False
        })
        
        # üéØ –ó–ê–ì–†–£–ñ–ê–ï–ú –ü–ê–†–´ –ò–ó –ö–û–ù–§–ò–ì–ê
        self.trading_pairs = get_preset(pair_preset)
        if not self.trading_pairs:
            logger.error(f"‚ùå Preset '{pair_preset}' not found! Using default.")
            self.trading_pairs = get_preset("full_20_pairs")
        
        logger.info(f"üéØ Loaded {len(self.trading_pairs)} pairs from preset: {pair_preset}")
        
        # –í—Å–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö
        self.all_symbols = set()
        for pair in self.trading_pairs:
            self.all_symbols.add(pair["asset_a"])
            self.all_symbols.add(pair["asset_b"])
        self.all_symbols = list(self.all_symbols)
        
        self.historical_data = {}
        self.timeframe = "15m"
        self.lookback_bars = 672
        self.data_loaded = False
        self.window_bars = 35
        
        # ADF –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        self.adf_lookbacks = [60, 40, 20]
        self.adf_critical_value = -2.58
        
        # –•—Ä–∞–Ω–∏–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –∫–∞–∂–¥–æ–π –ø–∞—Ä—ã
        self.pair_states = {}
        for pair in self.trading_pairs:
            self.pair_states[pair["name"]] = {
                'current_signal': 'HOLD',
                'adf_passed': False,
                'position_open': False,
                'data_loaded': False
            }
    
    # ... –æ—Å—Ç–∞–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã –æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π ...
    # complete_data_reset, fetch_historical_data, get_pair_historical_spread, 
    # calculate_adf_test, calculate_pair_spread, calculate_zscore_for_pair,
    # trading_signal_for_pair, get_current_prices, run
    
    def switch_preset(self, new_preset):
        """–î–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–µ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–µ—Å–µ—Ç–∞ –ø–∞—Ä"""
        logger.info(f"üîÑ Switching to preset: {new_preset}")
        
        new_pairs = get_preset(new_preset)
        if not new_pairs:
            logger.error(f"‚ùå Preset '{new_preset}' not found!")
            return False
        
        self.trading_pairs = new_pairs
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —Å–∏–º–≤–æ–ª–æ–≤
        self.all_symbols = set()
        for pair in self.trading_pairs:
            self.all_symbols.add(pair["asset_a"])
            self.all_symbols.add(pair["asset_b"])
        self.all_symbols = list(self.all_symbols)
        
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è
        self.pair_states = {}
        for pair in self.trading_pairs:
            self.pair_states[pair["name"]] = {
                'current_signal': 'HOLD',
                'adf_passed': False,
                'position_open': False,
                'data_loaded': False
            }
        
        # –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        return self.complete_data_reset()

# üéØ –§–£–ù–ö–¶–ò–Ø –î–õ–Ø –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø –ü–ê–†
def test_pair_presets():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –ø—Ä–µ—Å–µ—Ç–æ–≤ –ø–∞—Ä"""
    from pairs_config import test_pair_combinations
    
    print("üîç TESTING ALL PAIR PRESETS...")
    results = test_pair_combinations()
    
    for preset, data in results.items():
        print(f"\nüìä {preset.upper()}:")
        print(f"   Valid pairs: {data['valid']}/{data['total']}")
        
        if data['invalid']:
            print("   ‚ùå Invalid pairs:")
            for invalid_pair, reason in data['invalid']:
                print(f"      - {invalid_pair['name']}: {reason}")

if __name__ == "__main__":
    # üéØ –í–û–ó–ú–û–ñ–ù–û–°–¢–¨ –í–´–ë–û–†–ê –ü–†–ï–°–ï–¢–ê –ß–ï–†–ï–ó –ê–†–ì–£–ú–ï–ù–¢–´
    import argparse
    
    parser = argparse.ArgumentParser(description='R-Style Pair Trading Monitor')
    parser.add_argument('--preset', type=str, default='full_20_pairs', 
                       help='Pair preset: top_10_btc_pairs, eth_cross_pairs, altcoin_pairs, full_20_pairs')
    parser.add_argument('--test', action='store_true', help='Test pair configurations')
    
    args = parser.parse_args()
    
    if args.test:
        test_pair_presets()
        sys.exit(0)
    
    # –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∞ —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º –ø—Ä–µ—Å–µ—Ç–æ–º
    monitor = RStylePairMonitor(pair_preset=args.preset)
    monitor.attach(ConsoleObserver())

    trader = OKXBasketTrader(paper_trading=True, max_exposure=1000)
    monitor.attach(trader)

    telegram_observer = TelegramObserver(trader=trader)
    monitor.attach(telegram_observer)

    polling_thread = threading.Thread(target=telegram_polling, args=(trader,), daemon=True)
    polling_thread.start()

    monitor.run(interval_minutes=1)