

===== monitor.py =====


import ccxt
import pandas as pd
import numpy as np
import time
import logging
from datetime import datetime
from observer import Subject  # <-- добавлено

# Logging setup
logging.basicConfig(
    level=logging.INFO,
    format="%(message)s",
    handlers=[
        logging.FileHandler("okx_basket_monitor.log"),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

class OKXBasketMonitor(Subject):  # <-- наследуемся от Subject
    def __init__(self):
        super().__init__()  # <-- инициализация Subject
        self.exchange = ccxt.okx({
            "enableRateLimit": True,
            "options": {"defaultType": "swap"},
            "sandbox": False
        })
        self.target = "BTC/USDT:USDT"
        self.basket_symbols = [
            "ETH/USDT:USDT",
            "BNB/USDT:USDT",
            "SOL/USDT:USDT",
            "XRP/USDT:USDT"
        ]
        self.basket_weights = []
        self.historical_data = {}
        self.lookback_days = 30

    # --- остальной код без изменений ---
    def fetch_historical_data(self):
        logger.info("Fetching historical data from OKX...")
        for symbol in [self.target] + self.basket_symbols:
            try:
                since = self.exchange.parse8601(
                    (datetime.utcnow() - pd.Timedelta(days=self.lookback_days)).isoformat()
                )
                ohlcv = self.exchange.fetch_ohlcv(symbol, "1d", since=since, limit=30)
                if not ohlcv:
                    logger.warning(f"No data for {symbol}")
                    continue
                closes = [c[4] for c in ohlcv]
                self.historical_data[symbol] = closes
                logger.info(f"Loaded {len(closes)} days for {symbol}")
            except Exception as e:
                logger.warning(f"Error loading {symbol}: {e}")

        valid = [s for s in [self.target] + self.basket_symbols
                 if s in self.historical_data and len(self.historical_data[s]) >= 10]
        if len(valid) < 3:
            logger.error("Not enough valid symbols for analysis.")
            return False
        return True

    def calculate_basket_weights(self):
        correlations, valid = [], []
        for symbol in self.basket_symbols:
            if symbol in self.historical_data and self.target in self.historical_data:
                x = self.historical_data[self.target]
                y = self.historical_data[symbol]
                if len(x) == len(y):
                    corr = np.corrcoef(x, y)[0, 1]
                    if not np.isnan(corr):
                        correlations.append(corr)
                        valid.append(symbol)
                        logger.info(f"Correlation BTC/{symbol}: {corr:.4f}")

        self.basket_symbols = valid
        if not correlations:
            if not self.basket_symbols:
                logger.error("No valid symbols for basket weights.")
                return
            logger.warning("No valid correlations, using equal weights.")
            self.basket_weights = np.ones(len(self.basket_symbols)) / len(self.basket_symbols)
            return

        abs_corr = np.abs(correlations)
        self.basket_weights = abs_corr / np.sum(abs_corr)
        logger.info("Calculated basket weights:")
        for s, w, c in zip(self.basket_symbols, self.basket_weights, correlations):
            logger.info(f"  {s}: {w:.3f} (corr={c:.3f})")

    def get_current_prices(self):
        prices = {}
        try:
            symbols = [self.target] + self.basket_symbols
            tickers = self.exchange.fetch_tickers(symbols)
            for s in symbols:
                if s in tickers and tickers[s].get("last") is not None:
                    prices[s] = tickers[s]["last"]
            if len(prices) != len(symbols):
                logger.warning("Some prices are missing.")
                return None
            return prices
        except Exception as e:
            logger.warning(f"Error fetching tickers: {e}")
            return None

    def calculate_basket_price(self, prices):
        return sum(self.basket_weights[i] * prices[s]
                   for i, s in enumerate(self.basket_symbols)
                   if s in prices)

    def calculate_spread_series(self):
        min_len = min(len(self.historical_data[s])
                      for s in [self.target] + self.basket_symbols
                      if s in self.historical_data)
        if min_len < 10:
            logger.warning("Insufficient historical data.")
            return None
        target = np.array(self.historical_data[self.target][-min_len:])
        basket = np.zeros(min_len)
        for i, s in enumerate(self.basket_symbols):
            basket += self.basket_weights[i] * np.array(self.historical_data[s][-min_len:])
        return target / basket

    def calculate_zscore(self, current_prices):
        if not all(s in current_prices for s in [self.target] + self.basket_symbols):
            return None, None, None
        spread_now = current_prices[self.target] / self.calculate_basket_price(current_prices)
        spread_hist = self.calculate_spread_series()
        if spread_hist is None:
            return None, None, None
        mean, std = np.mean(spread_hist), np.std(spread_hist)
        if std < 1e-10:
            return None, None, None
        z = (spread_now - mean) / std
        return z, spread_now, (mean, std)

    def trading_signal(self, z):
        if z is None:
            return "NO DATA"
        if z > 2.0:
            return "SHORT BTC / LONG BASKET"
        elif z < -2.0:
            return "LONG BTC / SHORT BASKET"
        elif abs(z) < 0.5:
            return "EXIT POSITION"
        return "HOLD"

    def run(self, interval_minutes=5):
        logger.info("Starting OKX basket monitor...")
        if not self.fetch_historical_data():
            logger.error("Failed to fetch historical data.")
            return
        self.calculate_basket_weights()
        if not self.basket_symbols:
            logger.error("No valid symbols for monitoring.")
            return
        logger.info(f"Monitoring symbols: {self.basket_symbols}")

        while True:
            try:
                prices = self.get_current_prices()
                if not prices:
                    time.sleep(60)
                    continue

                z, spread, stats = self.calculate_zscore(prices)
                if z is not None:
                    mean, std = stats
                    signal = self.trading_signal(z)
                    report = f"""
=== OKX FUTURES BASKET MONITOR ===
Time: {datetime.utcnow().strftime('%Y-%m-%d %H:%M:%S')} UTC
BTC-USDT: {prices[self.target]:.2f}
Basket Price: {self.calculate_basket_price(prices):.2f}
Spread: {spread:.6f}
Mean: {mean:.6f} ± {std:.6f}
Z-Score: {z:.4f}
Signal: {signal}
Status: {"NORMAL" if abs(z) < 0.5 else "WATCH" if abs(z) < 2 else "SIGNAL"}
"""
                    print(report)

                    # <-- вот здесь уведомляем всех наблюдателей
                    self.notify({
                        "time": datetime.utcnow(),
                        "target_price": prices[self.target],
                        "basket_price": self.calculate_basket_price(prices),
                        "spread": spread,
                        "mean": mean,
                        "std": std,
                        "z": z,
                        "signal": signal
                    })

                else:
                    logger.warning("Z-score unavailable.")
                time.sleep(interval_minutes * 60)
            except KeyboardInterrupt:
                logger.info("Monitoring stopped by user.")
                break
            except Exception as e:
                logger.warning(f"Error in loop: {e}")
                time.sleep(60)

def main():
    monitor = OKXBasketMonitor()
    monitor.run(interval_minutes=5)

if __name__ == "__main__":
    main()


===== observer.py =====


class Observer:
    """Observer interface."""
    def update(self, data):
        raise NotImplementedError("Observer subclasses must implement 'update' method.")


class Subject:
    """Base class for observable objects."""
    def __init__(self):
        self._observers = []

    def attach(self, observer: Observer):
        if observer not in self._observers:
            self._observers.append(observer)

    def detach(self, observer: Observer):
        if observer in self._observers:
            self._observers.remove(observer)

    def notify(self, data=None):
        for observer in self._observers:
            observer.update(data)


===== test_observer.py =====


from observer import Subject, Observer

class PrintObserver(Observer):
    def update(self, data):
        print("Received:", data)

if __name__ == "__main__":
    s = Subject()
    o = PrintObserver()
    s.attach(o)
    s.notify("Hello Observer Pattern")
