

===== callback_handler.py =====


# callback_handler.py
def handle_callback(callback_data, trader):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –∫–Ω–æ–ø–æ–∫ Telegram.
    callback_data: 'OPEN:LONG BTC / SHORT BASKET' –∏–ª–∏ 'CLOSE:LONG BTC / SHORT BASKET'
    """
    try:
        action, signal = callback_data.split(":", 1)
        if trader is None:
            print("‚ùå Trader not provided for callback")
            return

        if action == "OPEN":
            trader.open_position(signal)
        elif action == "CLOSE":
            trader.close_position(signal)
        else:
            print(f"‚ùå Unknown callback action: {action}")
    except Exception as e:
        print(f"‚ùå Callback handler error: {e}")


===== console_observer.py =====


from observer import Observer
from datetime import datetime

class ConsoleObserver(Observer):
    def update(self, data):
        basket_symbols = data.get('basket_symbols', [])
        symbols_text = "\n".join(basket_symbols) if basket_symbols else "‚Äî"

        print(f"[{datetime.utcnow().strftime('%Y-%m-%d %H:%M:%S')}] Basket Monitor Update")
        print(f"Signal: {data.get('signal')}")
        print(f"Z-score: {data.get('z', 0):.4f}")
        print(f"Spread: {data.get('spread', 0):.6f}")
        print(f"Basket Price: {data.get('basket_price', 0):.2f}")
        print(f"Target Price: {data.get('target_price', 0):.2f}")
        print(f"Current pairs:\n{symbols_text}")
        print("-" * 50)


===== monitor.py =====


import ccxt
import pandas as pd
import numpy as np
import time
import logging
from datetime import datetime, timedelta
from observer import Subject
from console_observer import ConsoleObserver
from trader import OKXBasketTrader
from telegram_observer import TelegramObserver
from callback_handler import handle_callback
import threading
import requests
import sys
from statsmodels.tsa.stattools import adfuller
import warnings
warnings.filterwarnings('ignore')

logging.basicConfig(level=logging.INFO, format="%(message)s")
logger = logging.getLogger(__name__)

class RStylePairMonitor(Subject):
    def __init__(self):
        super().__init__()
        self.exchange = ccxt.okx({
            "enableRateLimit": True,
            "options": {"defaultType": "swap"},
            "sandbox": False
        })
        
        # üéØ –ü–ê–†–´ –ö–ê–ö –í R-–ü–†–û–ï–ö–¢–ï (1vs1)
        self.trading_pairs = [
            {"asset_a": "ETH/USDT:USDT", "asset_b": "BNB/USDT:USDT", "name": "ETH_BNB"},
            {"asset_a": "BTC/USDT:USDT", "asset_b": "ETH/USDT:USDT", "name": "BTC_ETH"},
            {"asset_a": "SOL/USDT:USDT", "asset_b": "DOT/USDT:USDT", "name": "SOL_DOT"},
            {"asset_a": "XRP/USDT:USDT", "asset_b": "ADA/USDT:USDT", "name": "XRP_ADA"},
        ]
        
        # –í—Å–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö
        self.all_symbols = set()
        for pair in self.trading_pairs:
            self.all_symbols.add(pair["asset_a"])
            self.all_symbols.add(pair["asset_b"])
        self.all_symbols = list(self.all_symbols)
        
        self.historical_data = {}
        self.timeframe = "15m"
        self.lookback_bars = 672
        self.data_loaded = False
        self.window_bars = 35  # –°–∫–æ–ª—å–∑—è—â–µ–µ –æ–∫–Ω–æ –¥–ª—è Z-score
        
        # üéØ ADF –ù–ê–°–¢–†–û–ô–ö–ò –ö–ê–ö –í R
        self.adf_lookbacks = [120, 90, 60]  # 120, 90, 60 –±–∞—Ä–æ–≤
        self.adf_critical_value = -2.58  # 10% —É—Ä–æ–≤–µ–Ω—å –∑–Ω–∞—á–∏–º–æ—Å—Ç–∏
        
        # üéØ –•—Ä–∞–Ω–∏–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –∫–∞–∂–¥–æ–π –ø–∞—Ä—ã
        self.pair_states = {}
        for pair in self.trading_pairs:
            self.pair_states[pair["name"]] = {
                'current_signal': 'HOLD',
                'adf_passed': False,
                'position_open': False
            }
        
    def complete_data_reset(self):
        """–ü–û–õ–ù–´–ô –°–ë–†–û–° –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö –∏ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞"""
        logger.info("üóëÔ∏è COMPLETE DATA RESET INITIATED...")
        
        self.historical_data = {}
        self.data_loaded = False
        
        if self.fetch_historical_data():
            logger.info("‚úÖ COMPLETE RESET SUCCESSFUL - Fresh data loaded")
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º ADF –¥–ª—è –∫–∞–∂–¥–æ–π –ø–∞—Ä—ã
            for pair in self.trading_pairs:
                spread_data = self.get_pair_historical_spread(pair)
                if spread_data is not None:
                    adf_passed = self.calculate_adf_test(spread_data)
                    logger.info(f"üìä {pair['name']} ADF: {'PASSED' if adf_passed else 'FAILED'}")
            return True
        else:
            logger.error("‚ùå COMPLETE RESET FAILED")
            return False
        
    def fetch_historical_data(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≤—Å–µ—Ö —Å–∏–º–≤–æ–ª–æ–≤"""
        if self.data_loaded:
            logger.info("üìä Historical data already loaded, skipping...")
            return True
            
        logger.info("üîÑ FETCHING FRESH HISTORICAL DATA FROM OKX...")
        
        success_count = 0
        for symbol in self.all_symbols:
            try:
                ohlcv = self.exchange.fetch_ohlcv(symbol, self.timeframe, limit=self.lookback_bars)
                if ohlcv and len(ohlcv) >= 100:
                    self.historical_data[symbol] = [c[4] for c in ohlcv]
                    success_count += 1
                    logger.info(f"‚úÖ Loaded {len(self.historical_data[symbol])} bars for {symbol}")
                else:
                    logger.warning(f"‚ùå No data for {symbol}")
            except Exception as e:
                logger.warning(f"‚ùå Error loading {symbol}: {e}")
        
        if len(self.historical_data) >= 4:
            self.data_loaded = True
            logger.info(f"üéØ Successfully loaded {success_count} symbols")
            return True
        else:
            logger.error(f"‚ùå Not enough valid symbols: {len(self.historical_data)}/4")
            return False

    def get_pair_historical_spread(self, pair):
        """–ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–π —Å–ø—Ä–µ–¥ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –ø–∞—Ä—ã"""
        if pair["asset_a"] not in self.historical_data or pair["asset_b"] not in self.historical_data:
            return None
            
        min_len = min(len(self.historical_data[pair["asset_a"]]), 
                      len(self.historical_data[pair["asset_b"]]))
        
        if min_len < 100:
            return None
            
        prices_a = np.array(self.historical_data[pair["asset_a"]][-min_len:])
        prices_b = np.array(self.historical_data[pair["asset_b"]][-min_len:])
        
        spread = prices_a / prices_b
        return spread

    def calculate_adf_test(self, spread_data):
        """ADF —Ç–µ—Å—Ç –Ω–∞ —Å—Ç–∞—Ü–∏–æ–Ω–∞—Ä–Ω–æ—Å—Ç—å –∫–∞–∫ –≤ R-–ø—Ä–æ–µ–∫—Ç–µ"""
        if spread_data is None or len(spread_data) < max(self.adf_lookbacks):
            return False
        
        try:
            # üéØ –¢–û–ß–ù–ê–Ø –ö–û–ü–ò–Ø –õ–û–ì–ò–ö–ò –ò–ó R-–ö–û–î–ê
            adf_passed = True
            
            for lookback in self.adf_lookbacks:
                if len(spread_data) < lookback:
                    adf_passed = False
                    break
                    
                # –ë–µ—Ä–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–µ—Å—Ç–∞ (—Å–∫–æ–ª—å–∑—è—â–µ–µ –æ–∫–Ω–æ)
                test_data = spread_data[-lookback:]
                
                # ADF —Ç–µ—Å—Ç —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –∫–∞–∫ –≤ R
                adf_result = adfuller(test_data, maxlag=1, regression='c', autolag=None)
                adf_statistic = adf_result[0]  # ADF —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
                
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∫ –≤ R: adf_statistic <= criticalValue
                if adf_statistic > self.adf_critical_value:
                    adf_passed = False
                    break
            
            return adf_passed
            
        except Exception as e:
            logger.warning(f"‚ùå ADF test error for pair: {e}")
            return False

    def calculate_pair_spread(self, pair, current_prices):
        """–¢–µ–∫—É—â–∏–π —Å–ø—Ä–µ–¥ –¥–ª—è –ø–∞—Ä—ã: Asset_A / Asset_B"""
        if pair["asset_a"] not in current_prices or pair["asset_b"] not in current_prices:
            return None
            
        price_a = current_prices[pair["asset_a"]]
        price_b = current_prices[pair["asset_b"]]
        
        if price_a <= 0 or price_b <= 0:
            return None
            
        spread = price_a / price_b
        return spread

    def calculate_zscore_for_pair(self, pair, current_prices):
        """Z-score –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –ø–∞—Ä—ã –Ω–∞ —Å–∫–æ–ª—å–∑—è—â–µ–º –æ–∫–Ω–µ"""
        current_spread = self.calculate_pair_spread(pair, current_prices)
        if current_spread is None:
            return None, None, None
            
        historical_spread = self.get_pair_historical_spread(pair)
        if historical_spread is None or len(historical_spread) < self.window_bars:
            return None, None, None
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–∫–æ–ª—å–∑—è—â–µ–µ –æ–∫–Ω–æ
        window_data = historical_spread[-self.window_bars:]
        
        mean = np.mean(window_data)
        std = np.std(window_data)
        
        if std < 1e-10:
            return None, None, None
            
        z = (current_spread - mean) / std
        
        return z, current_spread, (mean, std)

    def trading_signal_for_pair(self, z, is_stationary, pair_name):
        """–õ–æ–≥–∏–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è –ø–∞—Ä—ã —Å ADF –ø—Ä–æ–≤–µ—Ä–∫–æ–π"""
        if z is None:
            return "NO DATA"
            
        # üéØ –ù–ï –¢–û–†–ì–£–ï–ú –ï–°–õ–ò –°–ü–†–ï–î –ù–ï –°–¢–ê–¶–ò–û–ù–ê–†–ï–ù
        if not is_stationary:
            return "NO TRADE - NOT STATIONARY"
            
        # R-–ø–æ—Ä–æ–≥–∏
        if z > 1.0:
            return f"SHORT_{pair_name.split('_')[0]}_LONG_{pair_name.split('_')[1]}"
        if z < -1.0:
            return f"LONG_{pair_name.split('_')[0]}_SHORT_{pair_name.split('_')[1]}"
        if abs(z) < 0.5:
            return "EXIT_POSITION"
            
        return "HOLD"

    def get_current_prices(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–∏—Ö —Ü–µ–Ω –¥–ª—è –≤—Å–µ—Ö —Å–∏–º–≤–æ–ª–æ–≤"""
        try:
            tickers = self.exchange.fetch_tickers(self.all_symbols)
            prices = {}
            
            for symbol in self.all_symbols:
                if symbol in tickers and tickers[symbol].get("last") is not None:
                    prices[symbol] = tickers[symbol]["last"]
                else:
                    logger.warning(f"‚ö†Ô∏è Missing price for {symbol}")
                    return None
                    
            return prices
        except Exception as e:
            logger.warning(f"‚ùå Error fetching prices: {e}")
            return None

    def run(self, interval_minutes=1):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –¥–ª—è –≤—Å–µ—Ö –ø–∞—Ä"""
        logger.info("üöÄ Starting R-STYLE PAIR MONITOR...")
        logger.info(f"üéØ Monitoring {len(self.trading_pairs)} trading pairs")
        logger.info(f"üéØ ADF Lookbacks: {self.adf_lookbacks} bars")
        logger.info(f"üéØ Z-score Window: {self.window_bars} bars")
        logger.info(f"üéØ R-STYLE THRESHOLDS: ENTER ¬±1.0, EXIT ¬±0.5")
        
        logger.info("üî• PERFORMING COMPLETE DATA RESET BEFORE START...")
        if not self.complete_data_reset():
            logger.error("‚ùå CRITICAL: Complete data reset failed")
            return
            
        consecutive_bad_data = 0
        
        while True:
            try:
                prices = self.get_current_prices()
                if not prices:
                    consecutive_bad_data += 1
                    if consecutive_bad_data >= 3:
                        logger.error("üö® Too many consecutive price errors, restarting...")
                        self.complete_data_reset()
                        consecutive_bad_data = 0
                    time.sleep(60)
                    continue
                
                consecutive_bad_data = 0
                current_time = datetime.utcnow().strftime('%H:%M:%S')
                
                # üéØ –û–ë–†–ê–ë–ê–¢–´–í–ê–ï–ú –ö–ê–ñ–î–£–Æ –ü–ê–†–£ –ù–ï–ó–ê–í–ò–°–ò–ú–û
                all_pair_data = []
                
                for pair in self.trading_pairs:
                    # –†–∞—Å—á–µ—Ç Z-score –∏ ADF –¥–ª—è –ø–∞—Ä—ã
                    z, spread, stats = self.calculate_zscore_for_pair(pair, prices)
                    historical_spread = self.get_pair_historical_spread(pair)
                    is_stationary = self.calculate_adf_test(historical_spread) if historical_spread is not None else False
                    
                    signal = self.trading_signal_for_pair(z, is_stationary, pair["name"])
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–∞—Ä—ã
                    self.pair_states[pair["name"]]['adf_passed'] = is_stationary
                    self.pair_states[pair["name"]]['current_signal'] = signal
                    
                    # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –ø–∞—Ä—ã
                    if z is not None:
                        adf_status = "STATIONARY" if is_stationary else "NON-STATIONARY"
                        status = "üö® ABNORMAL" if abs(z) > 3.0 else "‚úÖ NORMAL"
                        
                        logger.info(f"[{current_time}] {pair['name']}: Z={z:5.2f} {status} | ADF: {adf_status}")
                        logger.info(f"   Signal: {signal} | Spread: {spread:.3f}")
                    
                    # –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
                    pair_data = {
                        "pair_name": pair["name"],
                        "asset_a": pair["asset_a"],
                        "asset_b": pair["asset_b"], 
                        "price_a": prices.get(pair["asset_a"], 0),
                        "price_b": prices.get(pair["asset_b"], 0),
                        "spread": spread if spread else 0,
                        "z": z if z else 0,
                        "signal": signal,
                        "adf_passed": is_stationary
                    }
                    all_pair_data.append(pair_data)
                
                # –£–≤–µ–¥–æ–º–ª—è–µ–º –Ω–∞–±–ª—é–¥–∞—Ç–µ–ª–µ–π
                report_data = {
                    "time": datetime.utcnow(),
                    "pairs_data": all_pair_data,
                    "total_pairs": len(self.trading_pairs),
                    "active_pairs": len([p for p in all_pair_data if p['adf_passed']])
                }
                self.notify(report_data)
                
                logger.info("-" * 60)  # –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å –º–µ–∂–¥—É –∏—Ç–µ—Ä–∞—Ü–∏—è–º–∏
                time.sleep(interval_minutes * 60)
                
            except KeyboardInterrupt:
                logger.info("üõë Monitoring stopped by user")
                break
            except Exception as e:
                logger.warning(f"‚ùå Error in main loop: {e}")
                time.sleep(60)


def telegram_polling(trader):
    TELEGRAM_BOT_TOKEN = "8436652130:AAF6On0GJtRHfMZyqD3mpM57eXZfWofJeng"
    offset = None
    url = f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/getUpdates"

    while True:
        try:
            params = {'timeout': 30, 'offset': offset}
            response = requests.get(url, params=params, timeout=35)
            updates = response.json().get("result", [])
            for update in updates:
                if "callback_query" in update:
                    data = update["callback_query"]["data"]
                    handle_callback(data, trader)
                offset = update["update_id"] + 1
            time.sleep(1)
        except Exception as e:
            print("Telegram polling error:", e)
            time.sleep(5)


def main():
    monitor = RStylePairMonitor()
    monitor.attach(ConsoleObserver())

    trader = OKXBasketTrader(paper_trading=True, max_exposure=1000)
    monitor.attach(trader)

    telegram_observer = TelegramObserver(trader=trader)
    monitor.attach(telegram_observer)

    polling_thread = threading.Thread(target=telegram_polling, args=(trader,), daemon=True)
    polling_thread.start()

    monitor.run(interval_minutes=1)


if __name__ == "__main__":
    main()

===== observer.py =====


class Observer:
    """Observer interface."""
    def update(self, data):
        raise NotImplementedError("Observer subclasses must implement 'update' method.")


class Subject:
    """Base class for observable objects."""
    def __init__(self):
        self._observers = []

    def attach(self, observer: Observer):
        if observer not in self._observers:
            self._observers.append(observer)

    def detach(self, observer: Observer):
        if observer in self._observers:
            self._observers.remove(observer)

    def notify(self, data=None):
        for observer in self._observers:
            observer.update(data)


===== reset_data.py =====


#!/usr/bin/env python3
"""
–°–ö–†–ò–ü–¢ –î–õ–Ø –ü–û–õ–ù–û–ì–û –°–ë–†–û–°–ê –ò –ü–ï–†–ï–ó–ê–ì–†–£–ó–ö–ò –î–ê–ù–ù–´–•
"""

import sys
import os
import logging

sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from monitor import SimpleBasketMonitor

logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    datefmt='%Y-%m-%d %H:%M:%S'
)

def main():
    print("=" * 60)
    print("üîÑ DATA RESET SCRIPT - COMPLETE HISTORICAL DATA RELOAD")
    print("=" * 60)
    
    try:
        monitor = SimpleBasketMonitor()
        print("üìä Starting complete data reset...")
        
        if monitor.complete_data_reset():
            print("‚úÖ SUCCESS: Data reset completed successfully!")
            print("üéØ You can now run: python monitor.py")
            print("")
            print("üìà Expected results after reset:")
            print("   - Z-score: ¬±0.5 to ¬±2.0 (normal range)")
            print("   - Accurate trading signals")
        else:
            print("‚ùå FAILED: Data reset failed!")
            
    except Exception as e:
        print(f"üí• ERROR: {e}")
    
    print("=" * 60)

if __name__ == "__main__":
    main()


===== telegram_observer.py =====


from observer import Observer
import json
import requests
from callback_handler import handle_callback

TELEGRAM_BOT_TOKEN = "8436652130:AAF6On0GJtRHfMZyqD3mpM57eXZfWofJeng"
TELEGRAM_CHAT_ID = 317217451

class TelegramObserver(Observer):
    def __init__(self, trader=None):
        self.token = TELEGRAM_BOT_TOKEN
        self.chat_id = TELEGRAM_CHAT_ID
        self.trader = trader
        self.last_signals = {}  # üÜï –•—Ä–∞–Ω–∏–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–∏–≥–Ω–∞–ª—ã –¥–ª—è –∫–∞–∂–¥–æ–π –ø–∞—Ä—ã
        self.last_zs = {}       # üÜï –•—Ä–∞–Ω–∏–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ Z-score –¥–ª—è –∫–∞–∂–¥–æ–π –ø–∞—Ä—ã

    def send_message(self, text, buttons=None):
        url = f"https://api.telegram.org/bot{self.token}/sendMessage"
        payload = {
            'chat_id': self.chat_id,
            'text': text,
            'parse_mode': 'HTML'
        }
        if buttons:
            payload['reply_markup'] = json.dumps({'inline_keyboard': buttons})
        try:
            requests.post(url, data=payload, timeout=10)
            print("Telegram message sent")
        except Exception as e:
            print("Telegram send failed:", e)

    def update(self, data):
        # üÜï –û–ë–†–ê–ë–ê–¢–´–í–ê–ï–ú –î–ê–ù–ù–´–ï –û–¢ –ù–û–í–û–ì–û R-–ü–û–î–•–û–î–ê
        pairs_data = data.get('pairs_data', [])
        
        # üÜï –§–ò–õ–¨–¢–†–ê–¶–ò–Ø: –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –≤–∞–∂–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ –ø–∞—Ä–∞–º
        messages_to_send = []
        
        for pair_data in pairs_data:
            pair_name = pair_data['pair_name']
            current_signal = pair_data.get('signal', '')
            current_z = pair_data.get('z', 0)
            adf_passed = pair_data.get('adf_passed', False)
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–∞—Ä—É –µ—Å–ª–∏ –µ–µ –Ω–µ—Ç –≤ –∏—Å—Ç–æ—Ä–∏–∏
            if pair_name not in self.last_signals:
                self.last_signals[pair_name] = ''
                self.last_zs[pair_name] = 0
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω—É–∂–Ω–æ –ª–∏ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —ç—Ç–æ–π –ø–∞—Ä—ã
            should_send = False
            
            # 1. –°–∏–≥–Ω–∞–ª –∏–∑–º–µ–Ω–∏–ª—Å—è –ò —ç—Ç–æ —Ç–æ—Ä–≥–æ–≤—ã–π —Å–∏–≥–Ω–∞–ª
            if (current_signal != self.last_signals[pair_name] and 
                current_signal not in ["HOLD", "NO DATA", "NO TRADE - NOT STATIONARY"]):
                should_send = True
            
            # 2. –°–∏–ª—å–Ω–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ Z-score (–±–æ–ª–µ–µ —á–µ–º –Ω–∞ 0.2) –ò ADF –ø—Ä–æ–π–¥–µ–Ω
            elif (adf_passed and 
                  abs(current_z - self.last_zs[pair_name]) > 0.2 and
                  current_signal not in ["HOLD", "NO DATA"]):
                should_send = True
            
            # 3. –ü–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–∞—Ä—ã —Å —Ç–æ—Ä–≥–æ–≤—ã–º —Å–∏–≥–Ω–∞–ª–æ–º
            elif (self.last_signals[pair_name] == '' and 
                  current_signal not in ["HOLD", "NO DATA", "NO TRADE - NOT STATIONARY"]):
                should_send = True
            
            if should_send:
                # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–∞—Ä—ã
                asset_a = pair_data['asset_a'].split('/')[0]  # BTC, ETH, etc
                asset_b = pair_data['asset_b'].split('/')[0]
                
                z_score = round(current_z, 2)
                spread = round(pair_data.get('spread', 0), 3)
                price_a = round(pair_data.get('price_a', 0), 2)
                price_b = round(pair_data.get('price_b', 0), 2)
                
                # üÜï –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–∏–≥–Ω–∞–ª –¥–ª—è —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏
                formatted_signal = current_signal
                if "SHORT_" in current_signal and "LONG_" in current_signal:
                    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º "SHORT_ETH_LONG_BNB" –≤ "SHORT ETH / LONG BNB"
                    parts = current_signal.split('_')
                    if len(parts) >= 4:
                        formatted_signal = f"SHORT {parts[1]} / LONG {parts[3]}"
                
                msg = (
                    f"üéØ <b>PAIR TRADING ALERT - {pair_name}</b>\n"
                    f"Signal: <b>{formatted_signal}</b>\n"
                    f"Z-score: {z_score}\n"
                    f"Spread: {spread}\n"
                    f"ADF Test: {'‚úÖ PASSED' if adf_passed else '‚ùå FAILED'}\n"
                    f"Prices: {asset_a}={price_a} | {asset_b}={price_b}\n"
                    f"Pair: {asset_a} / {asset_b}"
                )
                
                messages_to_send.append({
                    'message': msg,
                    'signal': current_signal,
                    'pair_name': pair_name
                })
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –ø–∞—Ä—ã
            self.last_signals[pair_name] = current_signal
            self.last_zs[pair_name] = current_z
        
        # üÜï –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –∫–∞–∂–¥–æ–π –ø–∞—Ä—ã
        for msg_data in messages_to_send:
            buttons = None
            signal = msg_data['signal']
            pair_name = msg_data['pair_name']
            
            if signal and signal not in ["HOLD", "NO DATA", "NO TRADE - NOT STATIONARY", "EXIT_POSITION"]:
                buttons = [
                    [
                        {'text': 'OPEN', 'callback_data': f'OPEN:{signal}:{pair_name}'},
                        {'text': 'CLOSE', 'callback_data': f'CLOSE:{signal}:{pair_name}'}
                    ]
                ]
            elif signal == "EXIT_POSITION":
                buttons = [
                    [
                        {'text': 'CLOSE POSITION', 'callback_data': f'CLOSE:{signal}:{pair_name}'}
                    ]
                ]
            
            self.send_message(msg_data['message'], buttons)
        
        # üÜï –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–≤–æ–¥–∫—É –µ—Å–ª–∏ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–∞—Ä—ã
        active_pairs = data.get('active_pairs', 0)
        total_pairs = data.get('total_pairs', 0)
        
        if active_pairs > 0 and len(messages_to_send) > 0:
            summary_msg = f"\nüìä <b>SUMMARY:</b> {active_pairs}/{total_pairs} pairs stationary"
            self.send_message(summary_msg)

    # üÜï –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ–±—â–µ–≥–æ —Å—Ç–∞—Ç—É—Å–∞
    def send_status_summary(self, pairs_data):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –æ–±—â–µ–≥–æ —Å—Ç–∞—Ç—É—Å–∞ –≤—Å–µ—Ö –ø–∞—Ä"""
        active_count = sum(1 for p in pairs_data if p.get('adf_passed', False))
        trading_signals = [p for p in pairs_data if p.get('signal') not in ["HOLD", "NO DATA", "NO TRADE - NOT STATIONARY"]]
        
        msg = (
            f"üìà <b>PAIRS STATUS SUMMARY</b>\n"
            f"Active Pairs: {active_count}/{len(pairs_data)}\n"
            f"Trading Signals: {len(trading_signals)}\n"
        )
        
        for pair in pairs_data:
            if pair.get('adf_passed', False):
                signal = pair.get('signal', 'HOLD')
                z_score = round(pair.get('z', 0), 2)
                msg += f"\n{pair['pair_name']}: {signal} (Z={z_score})"
        
        self.send_message(msg)

===== trader.py =====


from observer import Observer
import logging

# –£—Å—Ç–∞–Ω–æ–≤–∏ —É—Ä–æ–≤–µ–Ω—å WARNING –≤–º–µ—Å—Ç–æ INFO
logging.basicConfig(level=logging.WARNING)  # ‚Üê –±—ã–ª–æ INFO
logger = logging.getLogger(__name__)

class OKXBasketTrader(Observer):
    def __init__(self, paper_trading=True, max_exposure=1000):
        """
        paper_trading: True ‚Äî –Ω–µ —Å—Ç–∞–≤–∏—Ç —Ä–µ–∞–ª—å–Ω—ã–µ –æ—Ä–¥–µ—Ä–∞, —Ç–æ–ª—å–∫–æ –≤—ã–≤–æ–¥–∏—Ç –≤ –∫–æ–Ω—Å–æ–ª—å.
        max_exposure: –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –Ω–∞ –æ–¥–Ω—É –ø–æ–∑–∏—Ü–∏—é.
        """
        self.paper_trading = paper_trading
        self.max_exposure = max_exposure
        self.current_positions = {}  # —Å–ª–æ–≤–∞—Ä—å –≤–∏–¥–∞ {'BTC/USDT': size, 'ETH/USDT': size}

    def update(self, data):
        """
        –ú–µ—Ç–æ–¥ Observer: –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ –∫–∞–∂–¥–æ–º –Ω–æ–≤–æ–º —Å–∏–≥–Ω–∞–ª–µ –æ—Ç –º–æ–Ω–∏—Ç–æ—Ä–∞.
        """
        signal = data.get("signal")
        if signal and signal != "HOLD":  # ‚Üê –î–û–ë–ê–í–õ–ï–ù–û: –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º HOLD —Å–∏–≥–Ω–∞–ª—ã
            self.execute_signal(signal, data)

    def execute_signal(self, signal, data):
        """
        –ü–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ –≤—ã–≤–æ–¥–∏—Ç, —á—Ç–æ –±—É–¥–µ—Ç —Å–¥–µ–ª–∞–Ω–æ.
        """
        if self.paper_trading:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º debug –≤–º–µ—Å—Ç–æ info –¥–ª—è —Å–ø–∞–º-—Å–æ–æ–±—â–µ–Ω–∏–π
            logger.debug(f"[PAPER TRADING] Signal received: {signal}")
            logger.debug(f"[PAPER TRADING] Data: {data}")
        else:
            logger.info(f"[REAL TRADING] Would execute: {signal}")

    # --- –ú–µ—Ç–æ–¥—ã –¥–ª—è –∫–Ω–æ–ø–æ–∫ ---
    def open_position(self, signal: str, size=None):
        if size is None:
            size = self.max_exposure
        self.current_positions[signal] = size
        # –û—Å—Ç–∞–≤–ª—è–µ–º info —Ç–æ–ª—å–∫–æ –¥–ª—è –≤–∞–∂–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π
        logger.info(f"‚úÖ [PAPER] OPENED: {signal} with size {size}")

    def close_position(self, signal: str):
        if signal in self.current_positions:
            del self.current_positions[signal]
            logger.info(f"‚úÖ [PAPER] CLOSED: {signal}")
        else:
            logger.warning(f"‚ö†Ô∏è [PAPER] No open position to close for {signal}")