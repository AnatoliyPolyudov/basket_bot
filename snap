

===== callback_handler.py =====


# callback_handler.py
def handle_callback(callback_data, trader):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –∫–Ω–æ–ø–æ–∫ Telegram.
    callback_data: 'OPEN:LONG BTC / SHORT BASKET' –∏–ª–∏ 'CLOSE:LONG BTC / SHORT BASKET'
    """
    try:
        action, signal = callback_data.split(":", 1)
        if trader is None:
            print("‚ùå Trader not provided for callback")
            return

        if action == "OPEN":
            trader.open_position(signal)
        elif action == "CLOSE":
            trader.close_position(signal)
        else:
            print(f"‚ùå Unknown callback action: {action}")
    except Exception as e:
        print(f"‚ùå Callback handler error: {e}")


===== console_observer.py =====


from observer import Observer
from datetime import datetime

class ConsoleObserver(Observer):
    def update(self, data):
        basket_symbols = data.get('basket_symbols', [])
        symbols_text = "\n".join(basket_symbols) if basket_symbols else "‚Äî"

        print(f"[{datetime.utcnow().strftime('%Y-%m-%d %H:%M:%S')}] Basket Monitor Update")
        print(f"Signal: {data.get('signal')}")
        print(f"Z-score: {data.get('z', 0):.4f}")
        print(f"Spread: {data.get('spread', 0):.6f}")
        print(f"Basket Price: {data.get('basket_price', 0):.2f}")
        print(f"Target Price: {data.get('target_price', 0):.2f}")
        print(f"Current pairs:\n{symbols_text}")
        print("-" * 50)


===== monitor.py =====


import ccxt
import pandas as pd
import numpy as np
import time
import logging
from datetime import datetime, timedelta
from observer import Subject
from console_observer import ConsoleObserver
from trader import OKXBasketTrader
from telegram_observer import TelegramObserver
from callback_handler import handle_callback
import threading
import requests
import sys

logging.basicConfig(level=logging.INFO, format="%(message)s")
logger = logging.getLogger(__name__)

class SimpleBasketMonitor(Subject):
    def __init__(self):
        super().__init__()
        self.exchange = ccxt.okx({
            "enableRateLimit": True,
            "options": {"defaultType": "swap"},
            "sandbox": False
        })
        self.target = "BTC/USDT:USDT"
        
        self.basket_symbols = [
            "ETH/USDT:USDT",      # ~$3,000 - –¥–æ—Ä–æ–≥–æ–π –∞–∫—Ç–∏–≤
            "BNB/USDT:USDT",      # ~$600
            "SOL/USDT:USDT",      # ~$150  
            "XRP/USDT:USDT",      # ~$0.50
            "ADA/USDT:USDT",      # ~$0.40
            "AVAX/USDT:USDT",     # ~$30
            "DOT/USDT:USDT",      # ~$6
            "LINK/USDT:USDT",     # ~$15
            "TRX/USDT:USDT"     # ~$0.70
        ]
        
        self.historical_data = {}
        self.timeframe = "15m"
        self.lookback_bars = 672
        self.data_loaded = False
        
    def complete_data_reset(self):
        """–ü–û–õ–ù–´–ô –°–ë–†–û–° –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö –∏ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞"""
        logger.info("üóëÔ∏è COMPLETE DATA RESET INITIATED...")
        
        self.historical_data = {}
        self.data_loaded = False
        
        if self.fetch_historical_data():
            logger.info("‚úÖ COMPLETE RESET SUCCESSFUL - Fresh data loaded")
            
            spread_stats = self.calculate_spread_stats()
            if spread_stats:
                mean, std = spread_stats
                logger.info(f"üìä NEW SPREAD STATS: mean={mean:.3f}, std={std:.3f}")
            return True
        else:
            logger.error("‚ùå COMPLETE RESET FAILED")
            return False
        
    def fetch_historical_data(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö"""
        if self.data_loaded:
            logger.info("üìä Historical data already loaded, skipping...")
            return True
            
        logger.info("üîÑ FETCHING FRESH HISTORICAL DATA FROM OKX...")
        
        success_count = 0
        for symbol in [self.target] + self.basket_symbols:
            try:
                ohlcv = self.exchange.fetch_ohlcv(symbol, self.timeframe, limit=self.lookback_bars)
                if ohlcv and len(ohlcv) >= 100:
                    self.historical_data[symbol] = [c[4] for c in ohlcv]
                    success_count += 1
                    logger.info(f"‚úÖ Loaded {len(self.historical_data[symbol])} bars for {symbol}")
                else:
                    logger.warning(f"‚ùå No data for {symbol}")
            except Exception as e:
                logger.warning(f"‚ùå Error loading {symbol}: {e}")
        
        valid_symbols = [s for s in [self.target] + self.basket_symbols 
                        if s in self.historical_data and len(self.historical_data[s]) >= 100]
        
        if len(valid_symbols) >= 4:
            self.data_loaded = True
            logger.info(f"üéØ Successfully loaded {success_count} symbols")
            return True
        else:
            logger.error(f"‚ùå Not enough valid symbols: {len(valid_symbols)}/4")
            return False

    def calculate_spread_stats(self):
        """–†–∞—Å—á–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–æ–≥–æ —Å–ø—Ä–µ–¥–∞"""
        historical_spread = self.calculate_spread()
        if historical_spread is not None and len(historical_spread) >= 100:
            return np.mean(historical_spread), np.std(historical_spread)
        return None

    def calculate_spread(self, current_prices=None):
        """
        –ü–†–ê–í–ò–õ–¨–ù–´–ô –º–µ—Ç–æ–¥ –ø–æ R –∫–æ–¥—É: –æ—Ç–Ω–æ—à–µ–Ω–∏–µ –æ–±—ã—á–Ω—ã—Ö —Ü–µ–Ω
        """
        if current_prices:
            btc_price = current_prices[self.target]
            alt_prices = [current_prices[s] for s in self.basket_symbols if s in current_prices]
            
            if not alt_prices or btc_price <= 0:
                return None
                
            avg_alt_price = np.mean(alt_prices)
            if avg_alt_price <= 0:
                return None
                
            spread = btc_price / avg_alt_price
            return spread
            
        else:
            min_len = min(len(self.historical_data[s]) for s in [self.target] + self.basket_symbols 
                         if s in self.historical_data)
            
            if min_len < 100:
                return None
                
            btc_prices = np.array(self.historical_data[self.target][-min_len:])
            alt_prices_matrix = []
            
            for symbol in self.basket_symbols:
                if symbol in self.historical_data and len(self.historical_data[symbol]) >= min_len:
                    alt_prices_matrix.append(self.historical_data[symbol][-min_len:])
            
            if not alt_prices_matrix:
                return None
                
            alt_prices_matrix = np.array(alt_prices_matrix)
            avg_alt_prices = np.mean(alt_prices_matrix, axis=0)
            
            spread = btc_prices / avg_alt_prices
            return spread

    def calculate_zscore(self, current_prices):
        """Z-score –∫–∞–∫ –≤ R –∫–æ–¥–µ"""
        current_spread = self.calculate_spread(current_prices)
        if current_spread is None:
            return None, None, None
            
        historical_spread = self.calculate_spread()
        if historical_spread is None or len(historical_spread) < 100:
            return None, None, None
            
        mean = np.mean(historical_spread)
        std = np.std(historical_spread)
        
        if std < 1e-10:
            return None, None, None
            
        z = (current_spread - mean) / std
        
        logger.info(f"üìä R-STYLE CALC: spread={current_spread:.3f}, mean={mean:.3f}, std={std:.3f}, z={z:.2f}")
        return z, current_spread, (mean, std)

    def get_current_prices(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–∏—Ö —Ü–µ–Ω"""
        try:
            symbols = [self.target] + self.basket_symbols
            tickers = self.exchange.fetch_tickers(symbols)
            prices = {}
            
            for symbol in symbols:
                if symbol in tickers and tickers[symbol].get("last") is not None:
                    prices[symbol] = tickers[symbol]["last"]
                else:
                    logger.warning(f"‚ö†Ô∏è Missing price for {symbol}")
                    return None
                    
            return prices
        except Exception as e:
            logger.warning(f"‚ùå Error fetching prices: {e}")
            return None

    def trading_signal(self, z):
        """–õ–æ–≥–∏–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ —Å –∞–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏"""
        if z is None:
            return "NO DATA"
            
        if z > 0.6:
            return "SHORT BTC / LONG BASKET"
        if z < -0.6:
            return "LONG BTC / SHORT BASKET"
        if abs(z) < 0.08:
            return "EXIT POSITION"
            
        return "HOLD"

    def run(self, interval_minutes=1):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª —Å –∞–≤—Ç–æ–∫–æ—Ä—Ä–µ–∫—Ü–∏–µ–π"""
        logger.info("üöÄ Starting ULTIMATE R-CODE BASED MONITOR...")
        
        logger.info("üî• PERFORMING COMPLETE DATA RESET BEFORE START...")
        if not self.complete_data_reset():
            logger.error("‚ùå CRITICAL: Complete data reset failed")
            return
            
        logger.info(f"üéØ Monitoring {len(self.basket_symbols)} symbols with FRESH data")
        
        consecutive_bad_z = 0
        
        while True:
            try:
                prices = self.get_current_prices()
                if not prices:
                    time.sleep(60)
                    continue
                    
                z, spread, stats = self.calculate_zscore(prices)
                signal = self.trading_signal(z)
                
                current_time = datetime.utcnow().strftime('%H:%M:%S')
                
                if z is not None and abs(z) > 3.0:
                    consecutive_bad_z += 1
                    logger.warning(f"üö® ABNORMAL Z-score: {z:.2f} (consecutive: {consecutive_bad_z})")
                    
                    if consecutive_bad_z >= 2:
                        logger.info("üîÑ AUTO-CORRECTING: Reloading historical data...")
                        if self.complete_data_reset():
                            consecutive_bad_z = 0
                            continue
                else:
                    consecutive_bad_z = 0
                
                if z is not None:
                    status = "üö® ABNORMAL" if abs(z) > 3.0 else "‚úÖ NORMAL"
                    logger.info(f"[{current_time}] Z: {z:6.2f} {status} | Signal: {signal} | Spread: {spread:.3f}")
                else:
                    logger.info(f"[{current_time}] Z: NO DATA | Signal: {signal}")
                
                report_data = {
                    "time": datetime.utcnow(),
                    "target_price": prices[self.target],
                    "basket_price": np.mean([prices[s] for s in self.basket_symbols]),
                    "spread": spread if spread else 0,
                    "z": z if z else 0,
                    "signal": signal,
                    "basket_symbols": self.basket_symbols
                }
                self.notify(report_data)
                
                time.sleep(interval_minutes * 60)
                
            except KeyboardInterrupt:
                logger.info("üõë Monitoring stopped by user")
                break
            except Exception as e:
                logger.warning(f"‚ùå Error in main loop: {e}")
                time.sleep(60)


def telegram_polling(trader):
    TELEGRAM_BOT_TOKEN = "8436652130:AAF6On0GJtRHfMZyqD3mpM57eXZfWofJeng"
    offset = None
    url = f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/getUpdates"

    while True:
        try:
            params = {'timeout': 30, 'offset': offset}
            response = requests.get(url, params=params, timeout=35)
            updates = response.json().get("result", [])
            for update in updates:
                if "callback_query" in update:
                    data = update["callback_query"]["data"]
                    handle_callback(data, trader)
                offset = update["update_id"] + 1
            time.sleep(1)
        except Exception as e:
            print("Telegram polling error:", e)
            time.sleep(5)


def main():
    monitor = SimpleBasketMonitor()
    monitor.attach(ConsoleObserver())

    trader = OKXBasketTrader(paper_trading=True, max_exposure=1000)
    monitor.attach(trader)

    telegram_observer = TelegramObserver(trader=trader)
    monitor.attach(telegram_observer)

    polling_thread = threading.Thread(target=telegram_polling, args=(trader,), daemon=True)
    polling_thread.start()

    monitor.run(interval_minutes=1)


if __name__ == "__main__":
    main()


===== observer.py =====


class Observer:
    """Observer interface."""
    def update(self, data):
        raise NotImplementedError("Observer subclasses must implement 'update' method.")


class Subject:
    """Base class for observable objects."""
    def __init__(self):
        self._observers = []

    def attach(self, observer: Observer):
        if observer not in self._observers:
            self._observers.append(observer)

    def detach(self, observer: Observer):
        if observer in self._observers:
            self._observers.remove(observer)

    def notify(self, data=None):
        for observer in self._observers:
            observer.update(data)


===== reset_data.py =====


#!/usr/bin/env python3
"""
–°–ö–†–ò–ü–¢ –î–õ–Ø –ü–û–õ–ù–û–ì–û –°–ë–†–û–°–ê –ò –ü–ï–†–ï–ó–ê–ì–†–£–ó–ö–ò –î–ê–ù–ù–´–•
"""

import sys
import os
import logging

sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from monitor import SimpleBasketMonitor

logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    datefmt='%Y-%m-%d %H:%M:%S'
)

def main():
    print("=" * 60)
    print("üîÑ DATA RESET SCRIPT - COMPLETE HISTORICAL DATA RELOAD")
    print("=" * 60)
    
    try:
        monitor = SimpleBasketMonitor()
        print("üìä Starting complete data reset...")
        
        if monitor.complete_data_reset():
            print("‚úÖ SUCCESS: Data reset completed successfully!")
            print("üéØ You can now run: python monitor.py")
            print("")
            print("üìà Expected results after reset:")
            print("   - Z-score: ¬±0.5 to ¬±2.0 (normal range)")
            print("   - Accurate trading signals")
        else:
            print("‚ùå FAILED: Data reset failed!")
            
    except Exception as e:
        print(f"üí• ERROR: {e}")
    
    print("=" * 60)

if __name__ == "__main__":
    main()


===== telegram_observer.py =====


from observer import Observer
import json
import requests
from callback_handler import handle_callback

TELEGRAM_BOT_TOKEN = "8436652130:AAF6On0GJtRHfMZyqD3mpM57eXZfWofJeng"
TELEGRAM_CHAT_ID = 317217451

class TelegramObserver(Observer):
    def __init__(self, trader=None):
        self.token = TELEGRAM_BOT_TOKEN
        self.chat_id = TELEGRAM_CHAT_ID
        self.trader = trader

    def send_message(self, text, buttons=None):
        url = f"https://api.telegram.org/bot{self.token}/sendMessage"
        payload = {
            'chat_id': self.chat_id,
            'text': text,
            'parse_mode': 'HTML'
        }
        if buttons:
            payload['reply_markup'] = json.dumps({'inline_keyboard': buttons})
        try:
            requests.post(url, data=payload, timeout=10)
            print("Telegram message sent")
        except Exception as e:
            print("Telegram send failed:", e)

    def update(self, data):
        basket_symbols = data.get('basket_symbols', [])
        symbols_text = "\n".join(basket_symbols) if basket_symbols else "‚Äî"

        # –æ–∫—Ä—É–≥–ª–µ–Ω–∏–µ –¥–ª—è —É–¥–æ–±–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        z_score = round(data.get('z', 0), 2)
        spread = round(data.get('spread', 0), 3)
        basket_price = round(data.get('basket_price', 0), 2)
        target_price = round(data.get('target_price', 0), 2)

        msg = (
            f"Z-score: {z_score}\n"
            f"Spread: {spread}\n"
            f"Basket Price: {basket_price}\n"
            f"Target Price: {target_price}\n"
            f"Current pairs:\n{symbols_text}"
        )

        buttons = None
        signal = data.get('signal', "")
        if signal and signal != "NO DATA":
            buttons = [
                [
                    {'text': 'Open', 'callback_data': f'OPEN:{signal}'},
                    {'text': 'Close', 'callback_data': f'CLOSE:{signal}'}
                ]
            ]

        self.send_message(msg, buttons)


===== trader.py =====


from observer import Observer
import logging

# –£—Å—Ç–∞–Ω–æ–≤–∏ —É—Ä–æ–≤–µ–Ω—å WARNING –≤–º–µ—Å—Ç–æ INFO
logging.basicConfig(level=logging.WARNING)  # ‚Üê –±—ã–ª–æ INFO
logger = logging.getLogger(__name__)

class OKXBasketTrader(Observer):
    def __init__(self, paper_trading=True, max_exposure=1000):
        """
        paper_trading: True ‚Äî –Ω–µ —Å—Ç–∞–≤–∏—Ç —Ä–µ–∞–ª—å–Ω—ã–µ –æ—Ä–¥–µ—Ä–∞, —Ç–æ–ª—å–∫–æ –≤—ã–≤–æ–¥–∏—Ç –≤ –∫–æ–Ω—Å–æ–ª—å.
        max_exposure: –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –Ω–∞ –æ–¥–Ω—É –ø–æ–∑–∏—Ü–∏—é.
        """
        self.paper_trading = paper_trading
        self.max_exposure = max_exposure
        self.current_positions = {}  # —Å–ª–æ–≤–∞—Ä—å –≤–∏–¥–∞ {'BTC/USDT': size, 'ETH/USDT': size}

    def update(self, data):
        """
        –ú–µ—Ç–æ–¥ Observer: –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ –∫–∞–∂–¥–æ–º –Ω–æ–≤–æ–º —Å–∏–≥–Ω–∞–ª–µ –æ—Ç –º–æ–Ω–∏—Ç–æ—Ä–∞.
        """
        signal = data.get("signal")
        if signal and signal != "HOLD":  # ‚Üê –î–û–ë–ê–í–õ–ï–ù–û: –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º HOLD —Å–∏–≥–Ω–∞–ª—ã
            self.execute_signal(signal, data)

    def execute_signal(self, signal, data):
        """
        –ü–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ –≤—ã–≤–æ–¥–∏—Ç, —á—Ç–æ –±—É–¥–µ—Ç —Å–¥–µ–ª–∞–Ω–æ.
        """
        if self.paper_trading:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º debug –≤–º–µ—Å—Ç–æ info –¥–ª—è —Å–ø–∞–º-—Å–æ–æ–±—â–µ–Ω–∏–π
            logger.debug(f"[PAPER TRADING] Signal received: {signal}")
            logger.debug(f"[PAPER TRADING] Data: {data}")
        else:
            logger.info(f"[REAL TRADING] Would execute: {signal}")

    # --- –ú–µ—Ç–æ–¥—ã –¥–ª—è –∫–Ω–æ–ø–æ–∫ ---
    def open_position(self, signal: str, size=None):
        if size is None:
            size = self.max_exposure
        self.current_positions[signal] = size
        # –û—Å—Ç–∞–≤–ª—è–µ–º info —Ç–æ–ª—å–∫–æ –¥–ª—è –≤–∞–∂–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π
        logger.info(f"‚úÖ [PAPER] OPENED: {signal} with size {size}")

    def close_position(self, signal: str):
        if signal in self.current_positions:
            del self.current_positions[signal]
            logger.info(f"‚úÖ [PAPER] CLOSED: {signal}")
        else:
            logger.warning(f"‚ö†Ô∏è [PAPER] No open position to close for {signal}")