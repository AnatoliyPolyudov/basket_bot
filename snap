

===== callback_handler.py =====


# callback_handler.py
def handle_callback(callback_data, trader):
    """
    Обработка нажатий кнопок Telegram.
    callback_data: 'OPEN:LONG BTC / SHORT BASKET' или 'CLOSE:LONG BTC / SHORT BASKET'
    """
    try:
        action, signal = callback_data.split(":", 1)
        if trader is None:
            print("❌ Trader not provided for callback")
            return

        if action == "OPEN":
            trader.open_position(signal)
        elif action == "CLOSE":
            trader.close_position(signal)
        else:
            print(f"❌ Unknown callback action: {action}")
    except Exception as e:
        print(f"❌ Callback handler error: {e}")


===== console_observer.py =====


from observer import Observer
from datetime import datetime

class ConsoleObserver(Observer):
    def update(self, data):
        basket_symbols = data.get('basket_symbols', [])
        symbols_text = "\n".join(basket_symbols) if basket_symbols else "—"

        print(f"[{datetime.utcnow().strftime('%Y-%m-%d %H:%M:%S')}] Basket Monitor Update")
        print(f"Signal: {data.get('signal')}")
        print(f"Z-score: {data.get('z', 0):.4f}")
        print(f"Spread: {data.get('spread', 0):.6f}")
        print(f"Basket Price: {data.get('basket_price', 0):.2f}")
        print(f"Target Price: {data.get('target_price', 0):.2f}")
        print(f"Current pairs:\n{symbols_text}")
        print("-" * 50)


===== monitor.py =====


import ccxt
import pandas as pd
import numpy as np
import time
import logging
from datetime import datetime, timedelta
from observer import Subject
from console_observer import ConsoleObserver
from trader import OKXBasketTrader
from telegram_observer import TelegramObserver
from callback_handler import handle_callback
import threading
import requests
import sys

logging.basicConfig(level=logging.INFO, format="%(message)s")
logger = logging.getLogger(__name__)

class OKXBasketMonitor(Subject):
    def __init__(self):
        super().__init__()
        self.exchange = ccxt.okx({
            "enableRateLimit": True,
            "options": {"defaultType": "swap"},
            "sandbox": False
        })
        self.target = "BTC/USDT:USDT"
        self.basket_symbols = [
            "DOGE/USDT:USDT",
            "ADA/USDT:USDT",
            "XRP/USDT:USDT",
            "PEPE/USDT:USDT"
        ]
        self.basket_weights = []
        self.historical_data = {}
        self.lookback_days = 60
        self.normalization_factors = {}

    def fetch_historical_data(self):
        logger.info("Fetching historical data from OKX...")
        for symbol in [self.target] + self.basket_symbols:
            try:
                since = self.exchange.parse8601(
                    (datetime.utcnow() - pd.Timedelta(days=self.lookback_days)).isoformat()
                )
                ohlcv = self.exchange.fetch_ohlcv(symbol, "1d", since=since, limit=self.lookback_days)
                if not ohlcv:
                    logger.warning(f"No data for {symbol}")
                    continue
                self.historical_data[symbol] = [c[4] for c in ohlcv]
                logger.info(f"Loaded {len(self.historical_data[symbol])} days for {symbol}")
            except Exception as e:
                logger.warning(f"Error loading {symbol}: {e}")

        valid = [s for s in [self.target] + self.basket_symbols if s in self.historical_data and len(self.historical_data[s]) >= 20]
        if len(valid) < 3:
            logger.error("Not enough valid symbols for analysis.")
            return False
        return True

    def calculate_basket_weights(self):
        correlations = []
        valid_symbols = []

        print("="*50, flush=True)
        print("CALCULATING WEIGHTS BASED ON CORRELATION", flush=True)
        print("="*50, flush=True)

        for symbol in self.basket_symbols:
            if symbol in self.historical_data and self.target in self.historical_data:
                x = np.array(self.historical_data[self.target])
                y = np.array(self.historical_data[symbol])
                if len(x) == len(y):
                    corr = np.corrcoef(x, y)[0, 1]
                    if not np.isnan(corr):
                        correlations.append(abs(corr))
                        valid_symbols.append(symbol)
                        asset_name = symbol.split('/')[0]
                        quality = (
                            "EXCELLENT" if corr > 0.8 else
                            "GOOD" if corr > 0.6 else
                            "AVERAGE" if corr > 0.4 else
                            "WEAK" if corr > 0.2 else
                            "NO CORR"
                        )
                        direction = "positive" if corr > 0 else "negative"
                        print(f"{asset_name:8} | Correlation: {corr:6.3f} | {quality:8} | {direction}", flush=True)

        self.basket_symbols = valid_symbols
        if not correlations:
            logger.error("No valid symbols for basket weights.")
            return

        self.basket_weights = np.array(correlations) / np.sum(correlations)

        # Рассчитываем факторы нормализации
        self.calculate_normalization_factors()

        print("="*50, flush=True)
        print("FINAL BASKET WITH WEIGHTS (correlation-based)", flush=True)
        print("="*50, flush=True)
        for s, w, c in zip(self.basket_symbols, self.basket_weights, correlations):
            asset_name = s.split('/')[0]
            print(f"{asset_name:8} | Weight: {w:6.3f} | Correlation: {c:6.3f}", flush=True)
        print("="*50, flush=True)

    def calculate_normalization_factors(self):
        """Рассчитываем факторы нормализации на основе исторических данных"""
        self.normalization_factors[self.target] = np.mean(self.historical_data[self.target])
        
        basket_prices = np.zeros(len(self.historical_data[self.target]))
        for i, s in enumerate(self.basket_symbols):
            basket_prices += self.basket_weights[i] * np.array(self.historical_data[s])
        
        self.normalization_factors['basket'] = np.mean(basket_prices)
        
        print(f"NORMALIZATION: BTC_mean={self.normalization_factors[self.target]:.2f}, basket_mean={self.normalization_factors['basket']:.4f}", flush=True)

    def get_current_prices(self):
        try:
            symbols = [self.target] + self.basket_symbols
            tickers = self.exchange.fetch_tickers(symbols)
            prices = {s: tickers[s]["last"] for s in symbols if s in tickers and tickers[s].get("last") is not None}
            if len(prices) != len(symbols):
                logger.warning("Some prices are missing.")
                return None
            return prices
        except Exception as e:
            logger.warning(f"Error fetching tickers: {e}")
            return None

    def calculate_basket_price(self, prices):
        return sum(self.basket_weights[i] * prices[s] for i, s in enumerate(self.basket_symbols) if s in prices)

    def calculate_spread_series(self):
        min_len = min(len(self.historical_data[s]) for s in [self.target] + self.basket_symbols if s in self.historical_data)
        if min_len < 20:
            return None
            
        target_prices = np.array(self.historical_data[self.target][-min_len:])
        basket_prices = np.zeros(min_len)
        for i, s in enumerate(self.basket_symbols):
            basket_prices += self.basket_weights[i] * np.array(self.historical_data[s][-min_len:])
        
        # НОРМАЛИЗАЦИЯ исторических данных
        normalized_target = target_prices / self.normalization_factors[self.target]
        normalized_basket = basket_prices / self.normalization_factors['basket']
        
        return normalized_target / normalized_basket

    def calculate_zscore(self, current_prices):
        if not current_prices or not all(s in current_prices for s in [self.target] + self.basket_symbols):
            return None, None, None
            
        basket_price_now = self.calculate_basket_price(current_prices)
        if basket_price_now <= 0:
            return None, None, None
            
        # НОРМАЛИЗАЦИЯ текущих цен
        normalized_target_now = current_prices[self.target] / self.normalization_factors[self.target]
        normalized_basket_now = basket_price_now / self.normalization_factors['basket']
        
        spread_now = normalized_target_now / normalized_basket_now
        spread_hist = self.calculate_spread_series()
        
        if spread_hist is None:
            return None, None, None
            
        mean, std = np.mean(spread_hist), np.std(spread_hist)
        if std < 1e-10:
            return None, None, None
            
        z = (spread_now - mean) / std
        
        # ОТЛАДОЧНЫЙ ВЫВОД
        print(f"DEBUG: BTC={current_prices[self.target]:.2f} (norm={normalized_target_now:.3f})", flush=True)
        print(f"DEBUG: basket={basket_price_now:.4f} (norm={normalized_basket_now:.3f})", flush=True)
        print(f"DEBUG: spread_now={spread_now:.3f}, mean={mean:.3f}, std={std:.3f}, z={z:.2f}", flush=True)
        
        return z, spread_now, (mean, std)

    def trading_signal(self, z):
        if z is None: return "NO DATA"
        if z > 2.0: return "SHORT BTC / LONG BASKET"
        if z < -2.0: return "LONG BTC / SHORT BASKET"
        if abs(z) < 0.5: return "EXIT POSITION"
        return "HOLD"

    def run(self, interval_minutes=1):
        logger.info("Starting OKX basket monitor...")
        sys.stdout.flush()

        if not self.fetch_historical_data():
            logger.error("Failed to fetch historical data.")
            return

        self.calculate_basket_weights()
        if not self.basket_symbols:
            logger.error("No valid symbols for monitoring.")
            return

        logger.info(f"Monitoring symbols: {self.basket_symbols}")
        last_telegram_time = datetime.utcnow() - timedelta(minutes=10)

        while True:
            try:
                prices = self.get_current_prices()
                if not prices:
                    time.sleep(60)
                    continue

                z, spread, stats = self.calculate_zscore(prices)
                signal = self.trading_signal(z)
                current_time = datetime.utcnow().strftime('%H:%M:%S')
                
                if z is not None:
                    print(f"[{current_time}] Z-score: {z:6.2f} | Signal: {signal} | Spread: {spread:.3f}", flush=True)
                else:
                    print(f"[{current_time}] Z-score: NO DATA | Signal: {signal}", flush=True)

                if datetime.utcnow() - last_telegram_time >= timedelta(minutes=10):
                    report_data = {
                        "time": datetime.utcnow(),
                        "target_price": prices[self.target],
                        "basket_price": self.calculate_basket_price(prices),
                        "spread": spread if spread else 0,
                        "mean": stats[0] if stats else 0,
                        "std": stats[1] if stats else 0,
                        "z": z if z else 0,
                        "signal": signal,
                        "basket_symbols": self.basket_symbols,
                        "basket_weights": self.basket_weights
                    }
                    self.notify(report_data)
                    last_telegram_time = datetime.utcnow()

                time.sleep(interval_minutes * 60)
                
            except KeyboardInterrupt:
                logger.info("Monitoring stopped by user.")
                break
            except Exception as e:
                logger.warning(f"Error in loop: {e}")
                time.sleep(60)


def telegram_polling(trader):
    TELEGRAM_BOT_TOKEN = "8436652130:AAF6On0GJtRHfMZyqD3mpM57eXZfWofJeng"
    offset = None
    url = f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/getUpdates"

    while True:
        try:
            params = {'timeout': 30, 'offset': offset}
            response = requests.get(url, params=params, timeout=35)
            updates = response.json().get("result", [])
            for update in updates:
                if "callback_query" in update:
                    data = update["callback_query"]["data"]
                    handle_callback(data, trader)
                offset = update["update_id"] + 1
            time.sleep(1)
        except Exception as e:
            print("Telegram polling error:", e)
            time.sleep(5)


def main():
    monitor = OKXBasketMonitor()
    monitor.attach(ConsoleObserver())

    trader = OKXBasketTrader(paper_trading=True, max_exposure=1000)
    monitor.attach(trader)

    telegram_observer = TelegramObserver(trader=trader)
    monitor.attach(telegram_observer)

    polling_thread = threading.Thread(target=telegram_polling, args=(trader,), daemon=True)
    polling_thread.start()

    monitor.run(interval_minutes=1)


if __name__ == "__main__":
    main()

===== observer.py =====


class Observer:
    """Observer interface."""
    def update(self, data):
        raise NotImplementedError("Observer subclasses must implement 'update' method.")


class Subject:
    """Base class for observable objects."""
    def __init__(self):
        self._observers = []

    def attach(self, observer: Observer):
        if observer not in self._observers:
            self._observers.append(observer)

    def detach(self, observer: Observer):
        if observer in self._observers:
            self._observers.remove(observer)

    def notify(self, data=None):
        for observer in self._observers:
            observer.update(data)


===== telegram_observer.py =====


from observer import Observer
import json
import requests
from callback_handler import handle_callback

TELEGRAM_BOT_TOKEN = "8436652130:AAF6On0GJtRHfMZyqD3mpM57eXZfWofJeng"
TELEGRAM_CHAT_ID = 317217451

class TelegramObserver(Observer):
    def __init__(self, trader=None):
        self.token = TELEGRAM_BOT_TOKEN
        self.chat_id = TELEGRAM_CHAT_ID
        self.trader = trader

    def send_message(self, text, buttons=None):
        url = f"https://api.telegram.org/bot{self.token}/sendMessage"
        payload = {
            'chat_id': self.chat_id,
            'text': text,
            'parse_mode': 'HTML'
        }
        if buttons:
            payload['reply_markup'] = json.dumps({'inline_keyboard': buttons})
        try:
            requests.post(url, data=payload, timeout=10)
            print("Telegram message sent")
        except Exception as e:
            print("Telegram send failed:", e)

    def update(self, data):
        basket_symbols = data.get('basket_symbols', [])
        symbols_text = "\n".join(basket_symbols) if basket_symbols else "—"

        # округление для удобного отображения
        z_score = round(data.get('z', 0), 2)
        spread = round(data.get('spread', 0), 3)
        basket_price = round(data.get('basket_price', 0), 2)
        target_price = round(data.get('target_price', 0), 2)

        msg = (
            f"Z-score: {z_score}\n"
            f"Spread: {spread}\n"
            f"Basket Price: {basket_price}\n"
            f"Target Price: {target_price}\n"
            f"Current pairs:\n{symbols_text}"
        )

        buttons = None
        signal = data.get('signal', "")
        if signal and signal != "NO DATA":
            buttons = [
                [
                    {'text': 'Open', 'callback_data': f'OPEN:{signal}'},
                    {'text': 'Close', 'callback_data': f'CLOSE:{signal}'}
                ]
            ]

        self.send_message(msg, buttons)


===== trader.py =====


from observer import Observer
import logging

# Установи уровень WARNING вместо INFO
logging.basicConfig(level=logging.WARNING)  # ← было INFO
logger = logging.getLogger(__name__)

class OKXBasketTrader(Observer):
    def __init__(self, paper_trading=True, max_exposure=1000):
        """
        paper_trading: True — не ставит реальные ордера, только выводит в консоль.
        max_exposure: максимальная сумма на одну позицию.
        """
        self.paper_trading = paper_trading
        self.max_exposure = max_exposure
        self.current_positions = {}  # словарь вида {'BTC/USDT': size, 'ETH/USDT': size}

    def update(self, data):
        """
        Метод Observer: вызывается при каждом новом сигнале от монитора.
        """
        signal = data.get("signal")
        if signal and signal != "HOLD":  # ← ДОБАВЛЕНО: игнорируем HOLD сигналы
            self.execute_signal(signal, data)

    def execute_signal(self, signal, data):
        """
        Пока просто выводит, что будет сделано.
        """
        if self.paper_trading:
            # Используем debug вместо info для спам-сообщений
            logger.debug(f"[PAPER TRADING] Signal received: {signal}")
            logger.debug(f"[PAPER TRADING] Data: {data}")
        else:
            logger.info(f"[REAL TRADING] Would execute: {signal}")

    # --- Методы для кнопок ---
    def open_position(self, signal: str, size=None):
        if size is None:
            size = self.max_exposure
        self.current_positions[signal] = size
        # Оставляем info только для важных действий
        logger.info(f"✅ [PAPER] OPENED: {signal} with size {size}")

    def close_position(self, signal: str):
        if signal in self.current_positions:
            del self.current_positions[signal]
            logger.info(f"✅ [PAPER] CLOSED: {signal}")
        else:
            logger.warning(f"⚠️ [PAPER] No open position to close for {signal}")